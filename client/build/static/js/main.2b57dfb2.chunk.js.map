{"version":3,"sources":["service/profile.ts","components/pages/MessengerPage/MessengerPage.module.scss","components/pages/ProfilePage/ProfilePage.module.scss","components/pages/FriendsPage/FriendsPage.module.scss","store/common/messages/actionTypes.ts","constants/history.ts","components/common/Avatar/Avatar.tsx","constants/common.ts","components/pages/LoginPage/SingIn/SingIn.tsx","components/common/Profile/EditProfileForm/EditProfileForm.tsx","components/common/Profile/EditProfile/EditProfile.tsx","service/post.ts","components/common/Post/CreatePostModal/CreatePostModal.tsx","components/common/Post/PostCreator/PostCreator.tsx","service/friends.ts","store/common/messages/actionCreators.ts","store/state.ts","components/common/Message/WriteMessageModal/WriteMessageModal.tsx","store/common/news/actionTypes.ts","components/common/Message/MessageCreator/MessageCreator.tsx","components/common/Profile/Profile.tsx","components/common/Profile/ProfileCard/ProfileCard.tsx","components/common/Post/Post.tsx","components/common/Post/PostsList/PostsList.tsx","store/common/news/actionCreators.ts","hooks/socket.ts","store/common/news/selectors.ts","components/pages/NewsPage/NewsPage.tsx","components/pages/ProfilePage/ProfilePage.tsx","components/pages/FriendsPage/FriendsList/FriendsList.tsx","components/pages/FriendsPage/FindFriends/FindFriends.tsx","components/pages/FriendsPage/OutgoingRequests/OutgoingRequests.tsx","components/pages/FriendsPage/FriendRequests/FriendRequests.tsx","components/pages/FriendsPage/FriendsPage.tsx","components/pages/MessengerPage/Dialogs/DialogItem.tsx","components/pages/MessengerPage/Dialogs/Dialogs.tsx","components/pages/MessengerPage/Chat/Chat.tsx","components/pages/MessengerPage/MessengerPage.tsx","routes/routes.ts","constants/routes.ts","components/common/Routes/Routes.tsx","components/common/ContentArea/ContentArea.tsx","components/pages/LoginPage/SingUp/SingUp.tsx","components/pages/LoginPage/LoginPage.tsx","components/common/User/User.tsx","components/App/App.tsx","store/common/profile/reducer.ts","store/common/messages/reducer.ts","store/common/news/reducer.ts","store/rootReducer.ts","store/common/profile/sagas.ts","service/messages.ts","store/common/messages/sagas.ts","store/common/news/sagas.ts","store/sagas.ts","store/store.ts","index.tsx","components/common/Avatar/ConfigureAvatar/ConfigureAvatar.tsx","components/common/Profile/ProfileCard/ProfileCard.module.scss","components/common/Post/PostsList/PostsList.module.scss","components/pages/NewsPage/NewsPage.module.scss","components/pages/FriendsPage/FriendsList/FriendsList.module.scss","components/pages/FriendsPage/FindFriends/FindFriends.module.scss","components/pages/FriendsPage/OutgoingRequests/OutgoingRequests.module.scss","components/pages/FriendsPage/FriendRequests/FriendRequests.module.scss","store/common/profile/actionTypes.ts","components/pages/MessengerPage/Chat/Chat.module.scss","components/common/Avatar/ConfigureAvatar/Fields/Mask.tsx","components/common/Avatar/ConfigureAvatar/Fields/Body.tsx","components/common/Avatar/ConfigureAvatar/Fields/LipColor.tsx","components/common/Avatar/ConfigureAvatar/Fields/SkinTone.tsx","components/common/Avatar/ConfigureAvatar/Fields/Hair.tsx","components/common/Avatar/ConfigureAvatar/Fields/HairColor.tsx","components/common/Avatar/ConfigureAvatar/Fields/Clothing.tsx","components/common/Avatar/ConfigureAvatar/Fields/ClothingColor.tsx","components/common/Avatar/ConfigureAvatar/Fields/Graphic.tsx","components/common/Avatar/ConfigureAvatar/Fields/Eyes.tsx","components/common/Avatar/ConfigureAvatar/Fields/Eyebrows.tsx","components/common/Avatar/ConfigureAvatar/Fields/Mouth.tsx","components/common/Avatar/ConfigureAvatar/Fields/FacialHair.tsx","components/common/Avatar/ConfigureAvatar/Fields/Accessory.tsx","components/common/Avatar/ConfigureAvatar/Fields/Hat.tsx","components/common/Avatar/ConfigureAvatar/Fields/Lashes.tsx","components/common/Avatar/ConfigureAvatar/Fields/HatColor.tsx","components/common/Avatar/ConfigureAvatar/Fields/Fields.ts","service/base.ts","store/common/profile/actionCreators.ts","store/common/profile/selectors.ts","components/pages/MessengerPage/Dialogs/Dialog.module.scss","service/auth.ts","service/constants.ts","components/App/App.module.scss","components/common/Profile/Profile.module.scss"],"names":["ProfileService","getSelf","Service","get","setSelf","data","post","then","res","setAvatar","module","exports","MessagesActionTypes","createBrowserHistory","Avatar","configurable","config","className","useState","modalVisible","setModalVisible","myProfile","useSelector","selectMyProfile","handleConfigureAvatar","useCallback","handleCancel","selfAvatar","avatar","tooltipStyle","display","placement","overlayStyle","title","type","onClick","accessory","body","circleColor","clothing","clothingColor","eyebrows","eyes","facialHair","graphic","hair","hairColor","hat","hatColor","lashes","lipColor","mask","mouth","skinTone","width","visible","footer","onCancel","zIndex","ConfigureAvatar","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","SingIn","showError","setShowError","onFinish","username","password","login","response","window","localStorage","uathToken","token","Axios","defaults","headers","location","pathname","catch","name","initialValues","remember","Item","label","rules","required","message","Password","htmlType","EditProfileForm","closeModal","dispatch","useDispatch","loaderVisible","setLoaderVisible","handleSaveData","a","secondName","status","birthday","city","email","Profile","_id","profileData","setProfileDataAction","spinning","initialValue","placeholder","EditProfile","showModal","shape","icon","EditOutlined","translate","size","PostService","filter","CreatePostModal","formRef","useRef","handleSavePost","createNewPostAction","current","resetFields","ref","TextArea","autoSize","minRows","maxRows","PostCreator","PlusCircleOutlined","FriendsService","LoadingState","fetchDialogMessagesAction","payload","FETCH_DIALOG_MESSAGES","setActiveDialogAction","SET_ACTIVE_DIALOG","setMessagesLoadingState","SET_LOADING_STATE","receiveNewMessageAction","RECEIVE_NEW_MESSAGE","sendMessageAction","SEND_MESSAGE","setLoadingStateWriteMessageModalAction","SET_LOADING_STATE_WRITE_MESSAGE_MODAL","NewsActionTypes","WriteMessageModal","hideModal","profile","loadingState","state","dialogs","writeMessageLoader","messageIsSend","setMessageIsSend","handleSendMessage","text","profileId","useEffect","LOADED","LOADING","MessageCreator","showPostCreator","showAddFriend","showStatus","showBirthday","showCity","showEmail","showSendMessage","avatarWidth","moment","format","addFriend","isMyProfile","styles","ProfileAvatar","style","ProfileData","UserName","Separator","flex","ProfileCard","arrowPointAtCenter","content","Post","marginTop","Meta","description","PostsList","posts","console","log","map","key","date","socket","selectNews","news","useSocket","socketIOClient","DEFAULT_API_URL","query","subscribe","eventKey","callback","on","unsubscribe","removeListener","NewsPage","length","FETCH_NEWS","RECEIVE_NEW_POST","ProfilePage","myProfileData","myPosts","selectMyPosts","fetchProfilePostsAction","pageSize","FriendsList","users","setUsers","usersList","user","FindFriends","OutgoingRequests","FriendRequests","FriendsPage","defaultActiveKey","Tabs","TabPane","tab","DialogItem","receiver","fromMe","Receiver","Name","FromMe","Text","Dialogs","activeDialog","store","allMessages","messages","FETCH_DIALOGS","search","selectDialog","dialog","hasMassages","Header","header","Search","onSearch","enterButton","newDialog","PlusOutlined","DialogsList","bordered","dataSource","renderItem","item","cx","ListItem","ActiveItem","lastMessageFromMe","locale","emptyText","Chat","elementForScrollRef","receiverProfile","setText","hideMessagesList","setHideMessagesList","onChangeText","e","target","value","sendMessage","scrollIntoView","profiles","HeaderName","MessagesList","HideMessagesList","index","startNextSender","sender","Message","MatchesPreviousSender","MessageOverlay","MessageData","ElementForScroll","WriteMessage","Input","allowClear","onChange","SendButton","UpCircleOutlined","MessengerPage","chat","Routes","id","SmileOutlined","component","path","UnorderedListOutlined","News","TeamOutlined","Friends","CommentOutlined","Messages","items","to","ContentArea","RoutesItems","route","SingUp","showSuccess","setShowSuccess","registration","min","dependencies","hasFeedback","getFieldValue","validator","rule","Promise","reject","resolve","LoginPage","User","userLogout","logout","logoutBtn","userName","userSecondName","trigger","App","isAuthenticated","fetchProfileDataAction","HeaderLine","AppContainer","AppName","history","ContentContainer","initialState","loading","undefined","rootReducer","combineReducers","action","ProfileActionTypes","SET_PROFILE_DATA","SET_PROFILE_AVATAR","SET_PROFILE_LOADING_STATE","FETCH_PROFILE_POSTS_SUCCESS","CREATE_NEW_POST","FETCH_DIALOGS_SUCCESS","FETCH_DIALOG_MESSAGES_SUCCESS","FETCH_DIALOG_MESSAGES_FAILED","dialogId","updatedDialog","find","updatedDialogs","FETCH_NEWS_SUCCESS","profileSaga","fetchProfileData","fetchProfilePosts","takeLatest","FETCH_PROFILE_DATA","FETCH_PROFILE_POSTS","put","setProfileLoadingStateAction","call","ERROR","fetchProfilePostsSuccessAction","MessagesService","messagesSaga","fetchDialogs","fetchMessages","setActiveDialog","takeEvery","FETCH_DIALOGS_FAILED","newsSaga","fetchNews","rootSaga","all","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","logger","run","RootSaga","ReactDOM","render","document","getElementById","setMask","setBody","setLipColor","setSkinTone","setHair","setHairColor","setClothing","setClothingColor","setGraphic","setEyes","setEyebrows","setMouth","setFacialHair","setAccessory","setHat","setHatColor","setLashes","editedAvatar","setProfileAvatarAction","handleValuesChange","changedValues","changedFields","Object","keys","forEach","eval","toUpperCase","slice","onValuesChange","Mask","Lashes","Body","LipColor","SkinTone","Hair","HairColor","Clothing","ClothingColor","Graphic","Eyes","Eyebrows","Mouth","FacialHair","Hat","HatColor","Accessory","valuePropName","Option","url","params","Res","Authorization","reload"],"mappings":"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","file":"static/js/main.2b57dfb2.chunk.js","sourcesContent":["import Service from './base'\nimport {IProfileEntity} from \"entities/Profile\";\nimport {IProfileAvatar} from \"entities/ProfileAvatar\";\n\nconst ProfileService = {\n    getSelf: () => Service.get('api/profile/self'),\n    setSelf: (data: IProfileEntity) => Service.post('api/profile/self', data).then(res => res && res.data),\n    setAvatar: (data: IProfileAvatar) => Service.post('api/profile/self/editAvatar', data).then(res => res && res.data)\n}\n\nexport default ProfileService;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"MessengerPage_messages__IWdw0\",\"dialogs\":\"MessengerPage_dialogs__3Hn-q\",\"chat\":\"MessengerPage_chat__2XBci\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfilePage\":\"ProfilePage_ProfilePage__3yFTJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FriendsPage\":\"FriendsPage_FriendsPage__3h6CR\",\"Tabs\":\"FriendsPage_Tabs__2zvHC\"};","import {Action} from \"redux\";\nimport {IDialog, IMessage} from \"./state\";\nimport {LoadingState} from \"../../state\";\n\nexport enum MessagesActionTypes {\n    FETCH_DIALOGS = 'messages/FETCH_DIALOGS',\n    FETCH_DIALOGS_SUCCESS = 'messages/FETCH_DIALOGS_SUCCESS',\n    FETCH_DIALOGS_FAILED = 'messages/FETCH_DIALOGS_FAILED',\n    FETCH_DIALOG_MESSAGES = 'messages/FETCH_DIALOG_MESSAGES',\n    FETCH_DIALOG_MESSAGES_SUCCESS = 'messages/FETCH_DIALOG_MESSAGES_SUCCESS',\n    FETCH_DIALOG_MESSAGES_FAILED = 'messages/FETCH_DIALOG_MESSAGES_FAILED',\n    SET_ACTIVE_DIALOG = 'messages/SET_ACTIVE_DIALOG',\n    SET_LOADING_STATE = 'messages/SET_LOADING_STATE',\n    RECEIVE_NEW_MESSAGE = 'messages/RECEIVE_NEW_MESSAGE',\n    SEND_MESSAGE = 'messages/SEND_MESSAGE',\n    SET_LOADING_STATE_WRITE_MESSAGE_MODAL = 'messages/SET_LOADING_STATE_WRITE_MESSAGE_MODAL',\n}\n\nexport interface IFetchDialogsAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.FETCH_DIALOGS;\n}\n\nexport interface IFetchDialogsSuccessAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.FETCH_DIALOGS_SUCCESS;\n    payload: IDialog[];\n}\n\nexport interface IFetchDialogsFailedAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.FETCH_DIALOGS_FAILED;\n}\n\nexport interface IFetchDialogMessagesAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.FETCH_DIALOG_MESSAGES;\n    payload: string\n}\n\nexport interface IFetchDialogMessagesSuccessAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.FETCH_DIALOG_MESSAGES_SUCCESS;\n    payload: IMessage[];\n}\n\nexport interface IFetchDialogMessagesFailedAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.FETCH_DIALOG_MESSAGES_FAILED;\n}\n\nexport interface ISetActiveDialogAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.SET_ACTIVE_DIALOG,\n    payload: {\n        dialog: IDialog,\n        hasMassages: boolean\n    }\n}\n\nexport interface ISetDialogsLoadingStateAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.SET_LOADING_STATE;\n    payload: LoadingState\n}\n\nexport interface IReceiveNewMessageAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.RECEIVE_NEW_MESSAGE;\n    payload: IMessage\n}\n\nexport interface ISendMessageAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.SEND_MESSAGE;\n    payload: {\n        text: string,\n        profileId: string\n    }\n}\n\nexport interface ISetLoadingStateWriteMessageModalAction extends Action<MessagesActionTypes> {\n    type: MessagesActionTypes.SET_LOADING_STATE_WRITE_MESSAGE_MODAL;\n    payload: LoadingState\n}\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory({});","import React, {useCallback, useState} from \"react\";\nimport {AvatarProps, BigHead} from \"@bigheads/core\";\nimport {Button, Modal, Tooltip} from \"antd\";\nimport ConfigureAvatar from \"./ConfigureAvatar/ConfigureAvatar\";\nimport {useSelector} from \"react-redux\";\nimport {modalZIndex} from \"constants/common\";\nimport {selectMyProfile} from \"store/common/profile/selectors\";\n\n\ninterface IAvatarProps {\n    configurable?: boolean,\n    config?: AvatarProps,\n    className?: string\n}\n\nconst Avatar = ({configurable=false, config, className}: IAvatarProps) => {\n    const [modalVisible, setModalVisible] = useState(false);\n    const myProfile = useSelector(selectMyProfile);\n\n    const handleConfigureAvatar = useCallback(() => {\n        setModalVisible(true);\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        setModalVisible(false);\n    }, []);\n\n    if(!myProfile) {\n        return null;\n    }\n\n    const selfAvatar = myProfile.avatar;\n    const avatar = config ? config : selfAvatar;\n    const tooltipStyle = configurable ? {} : {display: 'none'}\n\n    return (\n        <div className={className}>\n            <Tooltip\n                placement=\"bottom\"\n                overlayStyle={tooltipStyle}\n                title={\n                    <Button type=\"link\" onClick={handleConfigureAvatar}>Configure</Button>\n                }>\n                <BigHead\n                    accessory={avatar && avatar.accessory}\n                    body={avatar && avatar.body}\n                    circleColor=\"blue\"\n                    clothing={avatar && avatar.clothing}\n                    clothingColor={avatar && avatar.clothingColor}\n                    eyebrows={avatar && avatar.eyebrows}\n                    eyes={avatar && avatar.eyes}\n                    facialHair={avatar && avatar.facialHair}\n                    graphic={avatar && avatar.graphic}\n                    hair={avatar && avatar.hair}\n                    hairColor={avatar && avatar.hairColor}\n                    hat={avatar && avatar.hat}\n                    hatColor={avatar && avatar.hatColor}\n                    lashes={avatar && avatar.lashes}\n                    lipColor={avatar && avatar.lipColor}\n                    mask={avatar && avatar.mask}\n                    mouth={avatar && avatar.mouth}\n                    skinTone={avatar && avatar.skinTone}\n                />\n            </Tooltip>\n\n            {\n                configurable &&\n                <Modal\n                    title=\"Edit your profile avatar\"\n                    width={1200}\n                    visible={modalVisible}\n                    footer={null}\n                    onCancel={handleCancel}\n                    zIndex={modalZIndex}\n                >\n                    <ConfigureAvatar />\n                </Modal>\n            }\n\n        </div>\n    )\n}\n\nexport default Avatar;\n","// у popover zIndex === 1030 и при открытии модала из него, поповер перекрывает модал\nexport const modalZIndex = 1031;\n","import React, {useCallback, useState} from \"react\";\nimport {Form, Input, Button, Alert} from 'antd';\nimport { login } from 'service/auth'\nimport Axios from \"axios\";\n\nexport const formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 6 },\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n    },\n};\n\nexport const tailFormItemLayout = {\n    wrapperCol: {\n        xs: {\n            span: 24,\n            offset: 0,\n        },\n        sm: {\n            span: 16,\n            offset: 6,\n        },\n    },\n};\n\nconst SingIn = () => {\n    const [showError, setShowError] = useState(false);\n\n    const onFinish = useCallback(({username, password}) => {\n        login(username, password).then((response) => {\n            window.localStorage.uathToken = response.data.token;\n            Axios.defaults.headers = {\n                'Authorization': 'Token ' + response.data.token,\n                'Content-Type': 'application/json',\n            };\n\n            window.location.pathname = '/profile';\n        }).catch(() => {\n            setShowError(true)\n        });\n    }, []);\n\n    return (\n        <div>\n            <Form\n                {...formItemLayout}\n                name=\"basic\"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}>\n                <Form.Item\n                    label=\"Username\"\n                    name=\"username\"\n                    rules={[{ required: true, message: 'Please input your username!' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Password\"\n                    name=\"password\"\n                    rules={[{ required: true, message: 'Please input your password!' }]}\n                >\n                    <Input.Password />\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item>\n            </Form>\n\n            {showError && <Alert message=\"Something went wrong, try again\" type=\"error\" />}\n        </div>\n    )\n}\n\nexport default SingIn;\n","import React, {useCallback, useState} from \"react\";\nimport {Button, DatePicker, Form, Input, Divider, Spin} from \"antd\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {formItemLayout} from \"components/pages/LoginPage/SingIn/SingIn\";\nimport Profile from \"service/profile\";\nimport {selectMyProfile} from \"store/common/profile/selectors\";\nimport {setProfileDataAction} from \"store/common/profile/actionCreators\";\n\nimport \"./EditProfileForm.css\"\n\ninterface IProps {\n    closeModal: Function\n}\n\nconst EditProfileForm = ({closeModal}: IProps) => {\n    const dispatch = useDispatch();\n    const [loaderVisible, setLoaderVisible] = useState(false);\n    const myProfile = useSelector(selectMyProfile);\n\n    const handleSaveData = useCallback(async ({name, secondName, status, birthday, city, email}) => {\n        setLoaderVisible(true);\n        const profileData = await Profile.setSelf({_id: '', name, secondName, status, birthday, city, email});\n        dispatch(setProfileDataAction(profileData));\n        setLoaderVisible(false);\n        closeModal();\n    }, [])\n\n    if (!myProfile) {\n        return null;\n    }\n\n    const {\n        name,\n        secondName,\n        status,\n        birthday,\n        city,\n        email,\n    } = myProfile;\n\n    return (\n        <div className=\"EditProfileForm\">\n            <Spin spinning={loaderVisible}>\n                <Form\n                    {...formItemLayout}\n                    className=\"EditProfileForm-Form\"\n                    name=\"basic\"\n                    onFinish={handleSaveData}>\n                    <Form.Item\n                        label=\"Name\"\n                        name=\"name\"\n                        initialValue={name}\n                        rules={[{ required: true, message: 'Please input your name!' }]}\n                    >\n                        <Input placeholder=\"Ivan\"/>\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Second name\"\n                        name=\"secondName\"\n                        initialValue={secondName}\n                    >\n                        <Input placeholder=\"Ivanov\"/>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Status\"\n                        name=\"status\"\n                        initialValue={status}\n                    >\n                        <Input placeholder=\"Bla bla bla\"/>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Birthday\"\n                        name=\"birthday\"\n                        initialValue={birthday}\n                    >\n                        <DatePicker />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"City\"\n                        name=\"city\"\n                        initialValue={city}\n                    >\n                        <Input placeholder=\"Moscow\"/>\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Email\"\n                        name=\"email\"\n                        initialValue={email}\n                        rules={[{ type: 'email', message: 'Enter a valid email!' }]}\n                    >\n                        <Input placeholder=\"ya@pochta.ru\"/>\n                    </Form.Item>\n\n                    <Divider className=\"footerDivider\"/>\n\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Save\n                    </Button>\n                </Form>\n            </Spin>\n        </div>\n    )\n}\n\nexport default EditProfileForm;\n","import React, {useCallback, useState} from \"react\";\nimport {Button, Modal} from \"antd\";\nimport EditProfileForm from \"../EditProfileForm/EditProfileForm\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport {modalZIndex} from \"../../../../constants/common\";\n\nconst EditProfile = () => {\n    const [modalVisible, setModalVisible] = useState(false)\n\n    const handleCancel = useCallback(() => {\n        setModalVisible(false)\n    }, []);\n\n    const showModal = useCallback(() => {\n        setModalVisible(true)\n    }, []);\n\n    return (\n        <>\n            <Button\n                className=\"EditButton\"\n                type=\"link\"\n                shape=\"round\"\n                icon={<EditOutlined translate=\"span\"/>}\n                size=\"small\"\n                onClick={showModal}>\n                Edit\n            </Button>\n            <Modal\n                title=\"Edit your profile\"\n                visible={modalVisible}\n                footer={null}\n                onCancel={handleCancel}\n                zIndex={modalZIndex}\n            >\n                <EditProfileForm closeModal={handleCancel}/>\n            </Modal>\n        </>\n    )\n}\n\nexport default EditProfile;\n","import Service from './base'\nimport {IPost} from \"store/common/news/state\";\n\ninterface IListFilter {\n    profileId?: string,\n    pageSize?: number\n}\n\nexport const PostService = {\n    create: (data: IPost) => Service.post('api/post/create/', data).then(res => res && res.data),\n    list: (filter: IListFilter) => Service.get('api/post/list/', filter)\n}\n","import React, {MutableRefObject, RefObject, useCallback, useRef, useState} from \"react\";\nimport {Button, DatePicker, Divider, Form, Input, Spin} from \"antd\";\nimport {formItemLayout} from \"../../../pages/LoginPage/SingIn/SingIn\";\nimport {PostService} from \"../../../../service/post\";\nimport {IPost} from \"../../../../store/common/news/state\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {createNewPostAction} from \"../../../../store/common/profile/actionCreators\";\nimport {selectMyProfile} from \"../../../../store/common/profile/selectors\";\nimport {FormInstance} from \"antd/es/form\";\n\ninterface ICreatePostModal {\n    closeModal: Function\n}\n\nconst CreatePostModal = ({closeModal}:ICreatePostModal) => {\n    const dispatch = useDispatch();\n    const formRef: any = useRef();\n    const [loaderVisible, setLoaderVisible] = useState(false);\n\n    const handleSavePost = useCallback((post) => {\n        setLoaderVisible(true);\n        PostService.create(post).then((post: IPost) => {\n            dispatch(createNewPostAction(post));\n            setLoaderVisible(false);\n            formRef.current.resetFields();\n            closeModal();\n        });\n    }, []);\n\n    return (\n        <div>\n            <Spin spinning={loaderVisible}>\n                <Form\n                    {...formItemLayout}\n                    ref={formRef}\n                    name=\"basic\"\n                    onFinish={handleSavePost}>\n                    <Form.Item\n                        label=\"Title\"\n                        name=\"title\"\n                        rules={[{ required: true, message: 'Please input title!' }]}\n                    >\n                        <Input />\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Text\"\n                        name=\"text\"\n                        rules={[{ required: true, message: 'Please input text!' }]}\n                    >\n                        <Input.TextArea\n                            autoSize={{ minRows: 2, maxRows: 6 }}\n                        />\n                    </Form.Item>\n\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Create\n                    </Button>\n                </Form>\n            </Spin>\n        </div>\n    )\n}\n\nexport default CreatePostModal;\n","import React, {useCallback, useState} from \"react\";\nimport {Button, Modal} from \"antd\";\nimport {PlusCircleOutlined} from \"@ant-design/icons\";\nimport CreatePostModal from \"../CreatePostModal/CreatePostModal\";\n\ninterface IPostCreator {\n    className?: string\n}\n\nconst PostCreator = ({className}: IPostCreator) => {\n    const [modalVisible, setModalVisible] = useState(false);\n\n    const showModal = useCallback(() => {\n        setModalVisible(true)\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        setModalVisible(false)\n    }, []);\n\n    return (\n        <div className={className}>\n            <Button\n                type=\"primary\"\n                shape=\"round\"\n                icon={<PlusCircleOutlined translate=\"span\"/>}\n                size=\"small\"\n                onClick={showModal}>\n                Create post\n            </Button>\n            <Modal\n                title=\"Create post\"\n                visible={modalVisible}\n                footer={null}\n                onCancel={handleCancel}\n            >\n                <CreatePostModal closeModal={handleCancel}/>\n            </Modal>\n        </div>\n    )\n}\n\nexport default PostCreator;\n","import Service from './base'\n\ninterface IAddFriend {\n    profileId: string\n}\n\nexport const FriendsService = {\n    findList: () => Service.get('api/friends/all_users/'),\n    myFriends: () => Service.get('api/friends/my_friends/'),\n    outgoingRequests: () => Service.get('api/friends/outgoing_requests'),\n    incomingRequests: () => Service.get('api/friends/incoming_requests'),\n\n    addFriend: (data: IAddFriend) => Service.post('api/friends/add_friend', data),\n}\n","import {\n    IFetchDialogMessagesAction,\n    IFetchDialogMessagesFailedAction,\n    IFetchDialogMessagesSuccessAction,\n    IFetchDialogsAction,\n    IFetchDialogsFailedAction,\n    IFetchDialogsSuccessAction, IReceiveNewMessageAction, ISendMessageAction,\n    ISetActiveDialogAction,\n    ISetDialogsLoadingStateAction, ISetLoadingStateWriteMessageModalAction,\n    MessagesActionTypes\n} from \"./actionTypes\";\nimport {LoadingState} from \"../../state\";\nimport {IDialog, IMessage} from \"./state\";\n\n\nexport const fetchDialogsAction = (): IFetchDialogsAction => ({\n    type: MessagesActionTypes.FETCH_DIALOGS,\n});\n\nexport const fetchDialogsSuccessAction = (payload: IDialog[]): IFetchDialogsSuccessAction => ({\n    type: MessagesActionTypes.FETCH_DIALOGS_SUCCESS,\n    payload\n});\n\nexport const fetchDialogsFailedAction = (): IFetchDialogsFailedAction => ({\n    type: MessagesActionTypes.FETCH_DIALOGS_FAILED\n});\n\nexport const fetchDialogMessagesAction = (payload: string): IFetchDialogMessagesAction => ({\n    type: MessagesActionTypes.FETCH_DIALOG_MESSAGES,\n    payload\n});\n\nexport const fetchDialogMessagesSuccessAction = (payload: IMessage[]): IFetchDialogMessagesSuccessAction => ({\n    type: MessagesActionTypes.FETCH_DIALOG_MESSAGES_SUCCESS,\n    payload\n});\n\nexport const fetchDialogMessagesFailedAction = (): IFetchDialogMessagesFailedAction => ({\n    type: MessagesActionTypes.FETCH_DIALOG_MESSAGES_FAILED\n});\n\nexport const setActiveDialogAction = (payload: {dialog: IDialog, hasMassages: boolean}): ISetActiveDialogAction => ({\n    type: MessagesActionTypes.SET_ACTIVE_DIALOG,\n    payload\n});\n\nexport const setMessagesLoadingState = (payload: LoadingState): ISetDialogsLoadingStateAction => ({\n    type: MessagesActionTypes.SET_LOADING_STATE,\n    payload\n});\n\nexport const receiveNewMessageAction = (payload: IMessage): IReceiveNewMessageAction => ({\n    type: MessagesActionTypes.RECEIVE_NEW_MESSAGE,\n    payload\n});\n\nexport const sendMessageAction = (payload: {text: string, profileId: string}): ISendMessageAction => ({\n    type: MessagesActionTypes.SEND_MESSAGE,\n    payload\n});\n\nexport const setLoadingStateWriteMessageModalAction = (payload: LoadingState): ISetLoadingStateWriteMessageModalAction => ({\n    type: MessagesActionTypes.SET_LOADING_STATE_WRITE_MESSAGE_MODAL,\n    payload\n});\n\n\nexport type IMessagesAction =\n    IFetchDialogsAction\n    | IFetchDialogsSuccessAction\n    | IFetchDialogsFailedAction\n    | IFetchDialogMessagesAction\n    | IFetchDialogMessagesSuccessAction\n    | IFetchDialogMessagesFailedAction\n    | ISetActiveDialogAction\n    | ISetDialogsLoadingStateAction\n    | IReceiveNewMessageAction\n    | ISendMessageAction\n    | ISetLoadingStateWriteMessageModalAction\n\n\n","export enum LoadingState {\n    LOADED = 'LOADED',\n    LOADING = 'LOADING',\n    ERROR = 'ERROR',\n}\n","import React, {useCallback, useEffect, useState} from \"react\";\nimport {Button, Form, Input, Spin} from \"antd\";\nimport {formItemLayout} from \"components/pages/LoginPage/SingIn/SingIn\";\nimport {IProfileEntity} from \"../../../../entities/Profile\";\nimport {sendMessageAction} from \"store/common/messages/actionCreators\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {IRootState} from \"store/store\";\nimport {LoadingState} from \"../../../../store/state\";\n\ninterface IWriteMessageModal {\n    hideModal: Function,\n    profile: IProfileEntity\n}\n\nconst WriteMessageModal = ({hideModal, profile}: IWriteMessageModal) => {\n    const dispatch = useDispatch();\n    const loadingState = useSelector((state: IRootState) => state.dialogs.writeMessageLoader);\n    const [messageIsSend, setMessageIsSend] = useState(false);\n\n    const handleSendMessage = useCallback(async (message) => {\n        dispatch(sendMessageAction({text: message.text, profileId: profile._id}));\n        setMessageIsSend(true);\n    }, []);\n\n    useEffect(() => {\n        if (loadingState === LoadingState.LOADED && messageIsSend) {\n            hideModal();\n        }\n    }, [loadingState]);\n\n    return (\n        <div>\n            <Spin spinning={loadingState === LoadingState.LOADING}>\n                <Form\n                    {...formItemLayout}\n                    name=\"basic\"\n                    onFinish={handleSendMessage}>\n                    <Form.Item\n                        label=\"Text\"\n                        name=\"text\"\n                        rules={[{ required: true, message: 'Please input text!' }]}\n                    >\n                        <Input.TextArea\n                            autoSize={{ minRows: 2, maxRows: 6 }}\n                        />\n                    </Form.Item>\n\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Send\n                    </Button>\n                </Form>\n            </Spin>\n        </div>\n    )\n}\n\nexport default WriteMessageModal;\n","import {Action} from \"redux\";\nimport {IPost} from \"./state\";\n\nexport enum NewsActionTypes {\n    FETCH_NEWS = 'profile/FETCH_NEWS',\n    FETCH_NEWS_SUCCESS = 'profile/FETCH_NEWS_SUCCESS',\n    FETCH_NEWS_FAILED = 'profile/FETCH_NEWS_FAILED',\n    RECEIVE_NEW_POST = 'profile/RECEIVE_NEW_POST',\n}\n\nexport interface IFetchNewsAction extends Action<NewsActionTypes> {\n    type: NewsActionTypes.FETCH_NEWS;\n}\n\nexport interface IFetchNewsSuccessAction extends Action<NewsActionTypes> {\n    type: NewsActionTypes.FETCH_NEWS_SUCCESS;\n    payload: IPost[]\n}\n\nexport interface IFetchNewsFailedAction extends Action<NewsActionTypes> {\n    type: NewsActionTypes.FETCH_NEWS_FAILED;\n}\n\nexport interface IReceiveNewPostAction extends Action<NewsActionTypes> {\n    type: NewsActionTypes.RECEIVE_NEW_POST;\n    payload: IPost\n}\n","import React, {useCallback, useRef, useState} from \"react\";\nimport {Button, Modal} from \"antd\";\nimport WriteMessageModal from \"../WriteMessageModal/WriteMessageModal\";\nimport {IProfileEntity} from \"entities/Profile\";\nimport {modalZIndex} from 'constants/common'\ninterface IMessageCreator {\n    profile: IProfileEntity\n}\n\nconst MessageCreator = ({profile}: IMessageCreator) => {\n    const [modalVisible, setModalVisible] = useState(false);\n\n    const showModal = useCallback(() => {\n        setModalVisible(true)\n    }, []);\n\n    const handleCancel = useCallback(() => {\n        setModalVisible(false)\n    }, []);\n\n    return (\n        <div>\n            <Button\n                onClick={showModal}\n                size={'small'}\n            >\n                Write a message...\n            </Button>\n            <Modal\n                title=\"Create post\"\n                zIndex={modalZIndex}\n                visible={modalVisible}\n                footer={null}\n                onCancel={handleCancel}\n            >\n                <WriteMessageModal hideModal={handleCancel} profile={profile}/>\n            </Modal>\n        </div>\n    )\n}\n\nexport default MessageCreator;\n","import React, {useCallback} from \"react\";\nimport {Button, Col, Row} from \"antd\";\nimport Avatar from \"components/common/Avatar/Avatar\";\nimport EditProfile from \"components/common/Profile/EditProfile/EditProfile\";\nimport PostCreator from \"components/common/Post/PostCreator/PostCreator\";\nimport moment from \"moment\";\nimport {useSelector} from \"react-redux\";\n\nimport styles from \"./Profile.module.scss\"\nimport {FriendsService} from \"../../../service/friends\";\nimport MessageCreator from \"../Message/MessageCreator/MessageCreator\";\nimport {IProfileData} from \"store/common/profile/state\";\nimport {selectMyProfile} from \"store/common/profile/selectors\";\n\ninterface IProfile {\n    profileData: IProfileData,\n    showPostCreator?: boolean,\n    showAddFriend?: boolean,\n    showStatus?: boolean,\n    showBirthday?: boolean,\n    showCity?: boolean,\n    showEmail?: boolean,\n    showSendMessage?: boolean,\n    avatarWidth?: number\n}\n\nconst Profile = ({\n                     profileData,\n                     showPostCreator,\n                     showAddFriend,\n                     showStatus=true,\n                     showBirthday=true,\n                     showCity=true,\n                     showEmail=true,\n                     showSendMessage=true,\n                     avatarWidth=200,\n}: IProfile) => {\n    const myProfile = useSelector(selectMyProfile)\n    const birthday = profileData.birthday && moment(profileData.birthday).format('DD.MM.YYYY')\n\n    const addFriend = useCallback(() => {\n        FriendsService.addFriend({profileId: profileData._id})\n    }, []);\n\n    if (!myProfile) {\n        return null;\n    }\n\n    const isMyProfile = myProfile._id === profileData._id;\n\n    return (\n        <div className={styles.Profile}>\n            <div className={styles.ProfileAvatar} style={{width: avatarWidth}}>\n                <Avatar config={profileData.avatar} configurable={isMyProfile}/>\n            </div>\n\n            <div className={styles.ProfileData}>\n                <div>\n                    <div className={styles.UserName}>{profileData.name} {profileData.secondName}</div>\n\n                    <div className={styles.Separator}></div>\n\n                    {isMyProfile &&\n                        <div className={styles.EditProfile}>\n                            <EditProfile />\n                        </div>\n                    }\n\n                    {showStatus &&\n                        <Row>\n                            <Col flex=\"70px\">Status:</Col>\n                            <Col flex=\"auto\">{profileData.status}</Col>\n                        </Row>\n                    }\n                    {showBirthday &&\n                        <Row>\n                            <Col flex=\"70px\">Birthday:</Col>\n                            <Col flex=\"auto\">{birthday}</Col>\n                        </Row>\n                    }\n                    {showCity &&\n                        <Row>\n                            <Col flex=\"70px\">City:</Col>\n                            <Col flex=\"auto\">{profileData.city}</Col>\n                        </Row>\n                    }\n                    {showEmail &&\n                        <Row>\n                            <Col flex=\"70px\">Email:</Col>\n                            <Col flex=\"auto\">{profileData.email}</Col>\n                        </Row>\n                    }\n\n                    {showPostCreator && <PostCreator className={styles.PostCreator}/>}\n                    {showAddFriend && <Button onClick={addFriend} size={'small'}>Add to friends</Button>}\n                    {showSendMessage && !isMyProfile && <MessageCreator profile={profileData}/>}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Profile;\n","import React from \"react\";\nimport {Popover} from \"antd\";\nimport Avatar from \"components/common/Avatar/Avatar\";\nimport {AvatarProps} from \"@bigheads/core\";\nimport Profile from \"../Profile\";\nimport {IProfileData} from \"store/common/profile/state\";\n\nimport styles from './ProfileCard.module.scss';\n\n\ninterface IProfileCard {\n    className?: string,\n    configurable: boolean,\n    profile: IProfileData,\n}\n\nconst ProfileCard = ({configurable, profile, className}: IProfileCard) => {\n    return (\n        <div className={className}>\n            <Popover\n                arrowPointAtCenter\n                placement=\"topLeft\"\n                content={\n                    <Profile profileData={profile}/>\n                }\n            >\n                <div>\n                    <Avatar config={profile.avatar} configurable={configurable} className={styles.Avatar}/>\n                </div>\n            </Popover>\n        </div>\n    )\n}\n\nexport default ProfileCard;\n","import React from \"react\";\nimport {Card} from \"antd\";\nimport Avatar from \"components/common/Avatar/Avatar\";\nimport {AvatarProps} from \"@bigheads/core\";\nimport moment from \"moment\";\nimport ProfileCard from \"../Profile/ProfileCard/ProfileCard\";\nimport {IProfileData} from \"../../../store/common/profile/state\";\n\n\ninterface IPost {\n    title: string,\n    text: string,\n    profile: IProfileData,\n    date?: moment.Moment\n}\n\nconst Post = ({title, text, profile}:IPost) => {\n    return (\n        <Card style={{ marginTop: 16 }}>\n            <Card.Meta\n                avatar={<ProfileCard configurable={false} profile={profile}/>}\n                title={title}\n                description={text}\n            />\n        </Card>\n    )\n}\n\nexport default Post;\n","import React from \"react\";\nimport Post from \"../Post\";\n\nimport styles from \"./PostsList.module.scss\"\nimport {IPost} from \"store/common/news/state\";\n\n\ninterface IPostsList {\n    posts: IPost[],\n}\n\nconst PostsList = ({posts}: IPostsList) => {\n    console.log(posts)\n    return (\n        <div className={styles.PostsList}>\n            {\n                posts.map(post =>\n                    <Post\n                        key={post._id}\n                        title={post.title}\n                        text={post.text}\n                        date={post.date}\n                        profile={post.profile}\n                    />\n                )\n            }\n        </div>\n    )\n}\n\nexport default PostsList;\n","import {\n    IFetchNewsAction, IFetchNewsFailedAction, IFetchNewsSuccessAction, IReceiveNewPostAction, NewsActionTypes\n} from \"./actionTypes\";\nimport {IPost} from \"./state\";\n\n\nexport const fetchNewsAction = (): IFetchNewsAction => ({\n    type: NewsActionTypes.FETCH_NEWS,\n});\n\nexport const fetchNewsSuccessAction = (payload: IPost[]): IFetchNewsSuccessAction => ({\n    type: NewsActionTypes.FETCH_NEWS_SUCCESS,\n    payload\n});\n\nexport const fetchNewsFailedAction = (): IFetchNewsFailedAction => ({\n    type: NewsActionTypes.FETCH_NEWS_FAILED,\n});\n\nexport const receiveNewPostAction = (payload: IPost): IReceiveNewPostAction => ({\n    type: NewsActionTypes.RECEIVE_NEW_POST,\n    payload\n});\n\nexport type INewsAction =\n    IFetchNewsAction\n    | IFetchNewsSuccessAction\n    | IFetchNewsFailedAction\n    | IReceiveNewPostAction\n","import socketIOClient from \"socket.io-client\";\nimport { DEFAULT_API_URL } from 'service/constants';\n\nlet socket: SocketIOClient.Socket;\n\nconst connect = () => {\n    if (!socket) {\n        socket = socketIOClient(DEFAULT_API_URL, {query: {token: window.localStorage.uathToken}});\n    }\n\n    return socket;\n}\n\nconst useSocket = () => {\n    const socket = connect();\n\n    const subscribe = (eventKey: string, callback: Function) => {\n        if (!eventKey || !callback) {\n            return;\n        }\n        socket.on(eventKey, callback);\n    }\n\n    const unsubscribe = (eventKey: string, callback?: Function) => {\n        if (!eventKey) {\n            return;\n        }\n        socket.removeListener(eventKey, callback);\n    }\n\n    return {subscribe, unsubscribe, socket}\n}\n\nexport default useSocket;\n","import {IRootState} from \"../../store\";\n\nexport const selectNews = (state: IRootState) => (\n    state.news && state.news.posts\n)\n\n","import React, {useEffect} from \"react\";\nimport PostsList from \"../../common/Post/PostsList/PostsList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchNewsAction, receiveNewPostAction} from \"store/common/news/actionCreators\";\nimport {selectNews} from \"store/common/news/selectors\";\nimport useSocket from \"../../../hooks/socket\";\nimport {IPost} from \"store/common/news/state\";\n\nimport styles from './NewsPage.module.scss';\n\n\nconst NewsPage = () => {\n    const dispatch = useDispatch();\n    const posts = useSelector(selectNews);\n    const {subscribe, unsubscribe} = useSocket();\n\n    useEffect(() => {\n        if (!posts || !posts.length) {\n            dispatch(fetchNewsAction());\n        }\n    }, []);\n\n    useEffect(() => {\n        subscribe('NewPostCreated', (post: IPost) => {\n            dispatch(receiveNewPostAction(post));\n        })\n\n        return () => {\n            unsubscribe('NewPostCreated')\n        }\n    }, [])\n\n    return (\n        <div className={styles.NewsPage}>\n            <PostsList posts={posts}/>\n        </div>\n    )\n}\n\nexport default NewsPage;\n","import React, {useEffect} from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport PostsList from \"../../common/Post/PostsList/PostsList\";\n\nimport './ProfilePage.module.scss'\nimport Profile from \"../../common/Profile/Profile\";\nimport {selectMyPosts, selectMyProfile} from \"store/common/profile/selectors\";\n\nimport styles from './ProfilePage.module.scss'\nimport {fetchProfilePostsAction, fetchProfilePostsSuccessAction} from \"../../../store/common/profile/actionCreators\";\n\nconst ProfilePage = () => {\n    const dispatch = useDispatch();\n    const myProfileData = useSelector(selectMyProfile);\n    const myPosts = useSelector(selectMyPosts);\n\n    useEffect(() => {\n        if(myProfileData) {\n            dispatch(fetchProfilePostsAction({\n                profileId: myProfileData._id,\n                pageSize: 5\n            }));\n        }\n    }, [myProfileData])\n\n    if (!myProfileData) {\n        return null;\n    }\n\n    return (\n        <div className={styles.ProfilePage}>\n            <Profile profileData={myProfileData} showSendMessage={false} showPostCreator={true}/>\n            {myPosts && <PostsList posts={myPosts}/>}\n        </div>\n    );\n}\n\nexport default ProfilePage;\n","import React, {useCallback, useEffect, useState} from \"react\";\n\nimport {FriendsService} from \"service/friends\";\nimport {Card} from \"antd\";\nimport Profile from \"components/common/Profile/Profile\";\nimport {IProfileData} from \"store/common/profile/state\";\n\nimport styles from './FriendsList.module.scss';\n\n\nconst FriendsList = () => {\n    const [users, setUsers] = useState<IProfileData[]>([]);\n\n    useEffect(() => {\n        FriendsService.myFriends().then((usersList: IProfileData[]) => {\n            setUsers(usersList);\n        })\n    }, []);\n\n    return (\n        <div className={styles.FriendsList}>\n            {users.map((user) => (\n                <Card style={{ marginTop: 16 }} key={user._id}>\n                    <Profile\n                        profileData={user}\n                        showEmail={false}\n                        showCity={false}\n                        avatarWidth={100}\n                    />\n                </Card>\n            ))}\n        </div>\n    )\n}\n\nexport default FriendsList;\n","import React, {useEffect, useState} from \"react\";\nimport {FriendsService} from \"service/friends\";\nimport {Card} from \"antd\";\nimport Profile from \"components/common/Profile/Profile\";\nimport {IProfileData} from \"store/common/profile/state\";\n\nimport styles from './FindFriends.module.scss'\n\n\nconst FindFriends = () => {\n    const [users, setUsers] = useState<IProfileData[]>([]);\n\n    useEffect(() => {\n        FriendsService.findList().then((usersList: IProfileData[]) => {\n            setUsers(usersList);\n        });\n    }, []);\n\n    return (\n        <div className={styles.FindFriends}>\n            {users.map((user) => (\n                <Card style={{ marginTop: 16 }} key={user._id}>\n                    <Profile\n                        profileData={user}\n                        showAddFriend={true}\n                        showEmail={false}\n                        showCity={false}\n                        avatarWidth={100}\n                    />\n                </Card>\n            ))}\n        </div>\n    )\n}\n\nexport default FindFriends;\n","import React, {useEffect, useState} from \"react\";\n\nimport {FriendsService} from \"service/friends\";\nimport {Card} from \"antd\";\nimport Profile from \"components/common/Profile/Profile\";\nimport {IProfileData} from \"../../../../store/common/profile/state\";\n\nimport styles from './OutgoingRequests.module.scss';\n\n\nconst OutgoingRequests = () => {\n    const [users, setUsers] = useState<IProfileData[]>([]);\n\n    useEffect(() => {\n        FriendsService.outgoingRequests().then((usersList: IProfileData[]) => {\n            setUsers(usersList);\n        })\n    }, []);\n\n    return (\n        <div className={styles.OutgoingRequests}>\n            {users.map((user) => (\n                <Card style={{ marginTop: 16 }} key={user._id}>\n                    <Profile\n                        profileData={user}\n                        showEmail={false}\n                        showCity={false}\n                        avatarWidth={100}\n                    />\n                </Card>\n            ))}\n        </div>\n    )\n}\n\nexport default OutgoingRequests;\n","import React, {useEffect, useState} from \"react\";\n\nimport {FriendsService} from \"service/friends\";\nimport {Card} from \"antd\";\nimport Profile from \"components/common/Profile/Profile\";\nimport {IProfileData} from \"store/common/profile/state\";\n\nimport styles from './FriendRequests.module.scss';\n\n\nconst FriendRequests = () => {\n    const [users, setUsers] = useState<IProfileData[]>([]);\n\n    useEffect(() => {\n        FriendsService.incomingRequests().then((usersList: IProfileData[]) => {\n            setUsers(usersList);\n        })\n    }, []);\n\n    return (\n        <div className={styles.FriendRequests}>\n            {users.map((user) => (\n                <Card style={{ marginTop: 16 }} key={user._id}>\n                    <Profile\n                        profileData={user}\n                        showAddFriend={true}\n                        showEmail={false}\n                        showCity={false}\n                        avatarWidth={100}\n                    />\n                </Card>\n            ))}\n        </div>\n    )\n}\n\nexport default FriendRequests;\n","import React, {useEffect} from \"react\";\nimport {Tabs} from \"antd\";\nimport FriendsList from \"components/pages/FriendsPage/FriendsList/FriendsList\";\nimport FindFriends from \"./FindFriends/FindFriends\";\nimport OutgoingRequests from \"./OutgoingRequests/OutgoingRequests\";\nimport FriendRequests from \"./FriendRequests/FriendRequests\";\n\nimport styles from './FriendsPage.module.scss';\n\nconst FriendsPage = () => {\n    return (\n        <div className={styles.FriendsPage}>\n            <Tabs defaultActiveKey=\"1\" className={styles.Tabs}>\n                <Tabs.TabPane tab=\"My friends\" key=\"1\">\n                    <FriendsList />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Find friends\" key=\"2\">\n                    <FindFriends />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Friend requests\" key=\"3\">\n                    <FriendRequests />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Outgoing requests\" key=\"4\">\n                    <OutgoingRequests />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n    )\n}\n\nexport default FriendsPage;\n\n","import React from \"react\";\nimport Avatar from \"../../../common/Avatar/Avatar\";\n\nimport styles from './Dialog.module.scss'\nimport {IProfileData} from \"store/common/profile/state\";\n\ninterface IDialogItem {\n    text: string,\n    receiver: IProfileData,\n    fromMe: boolean\n}\n\nconst DialogItem = ({text, receiver, fromMe}: IDialogItem) => {\n    return (\n        <div className={styles.DialogItem}>\n            <Avatar config={receiver.avatar} configurable={false} className={styles.Avatar}/>\n            <div className={styles.Receiver}>\n                <div className={styles.Name}>{receiver.name + ' ' + receiver.secondName}</div>\n                <div>\n                    <span className={styles.FromMe}>{fromMe ? 'You: ' :''}</span>\n                    <span className={styles.Text}>{text}</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DialogItem;\n","import React, {useCallback, useEffect, useState} from \"react\";\nimport {Button, Empty, List} from \"antd\";\nimport {Input} from \"antd\";\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport styles from './Dialog.module.scss'\nimport DialogItem from \"./DialogItem\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport cx from 'classnames'\nimport {IDialog} from \"store/common/messages/state\";\nimport {setActiveDialogAction, fetchDialogsAction} from \"store/common/messages/actionCreators\";\nimport {IRootState} from \"store/store\";\n\ninterface IDialogs {\n    className: string,\n    activeDialog?: IDialog,\n}\n\nconst Dialogs = ({className, activeDialog}: IDialogs) => {\n    const dialogs = useSelector((store:IRootState) => store.dialogs.dialogs)\n    const allMessages = useSelector((store:IRootState) => store.dialogs.messages)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!dialogs || !dialogs.length) {\n            dispatch(fetchDialogsAction())\n        }\n    }, []);\n\n    const search = useCallback(() => {\n        console.log(123)\n    }, []);\n\n    const selectDialog = useCallback((dialog: IDialog) => {\n        const hasMassages = !!(allMessages && allMessages[dialog._id])\n        dispatch(setActiveDialogAction({dialog, hasMassages}))\n    }, [allMessages]);\n\n    const Header = (\n        <div className={styles.header}>\n            <Input.Search\n                onSearch={search}\n                placeholder=\"Find dialog\"\n                enterButton />\n            <Button\n                className={styles.newDialog}\n                type=\"primary\"\n                title=\"Start new dialog\"\n            >\n                <PlusOutlined translate=\"true\"/>\n            </Button>\n        </div>\n    )\n\n    return (\n        <div className={className}>\n            <List\n                className={styles.DialogsList}\n                size=\"large\"\n                header={Header}\n                bordered\n                dataSource={dialogs}\n\n                renderItem={\n                    item =>\n                        <List.Item\n                            className={cx(styles.ListItem, {\n                                [styles.ActiveItem]: item._id === (activeDialog && activeDialog._id)\n                            })}\n                            onClick={() => selectDialog(item)}\n                        >\n                            <DialogItem\n                                text={item.text}\n                                receiver={item.receiver}\n                                fromMe={item.lastMessageFromMe}/>\n                        </List.Item>\n                }\n                locale={{emptyText: <Empty description={'No dialogs yet'} />}}\n            />\n        </div>\n    )\n}\n\nexport default Dialogs;\n","import React, {ChangeEvent, MutableRefObject, RefObject, useCallback, useEffect, useRef, useState} from \"react\";\nimport {Button, Input} from \"antd\";\nimport cx from 'classnames';\nimport styles from './Chat.module.scss'\nimport {SendOutlined, UpCircleOutlined} from \"@ant-design/icons\";\nimport useSocket from \"hooks/socket\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {IDialogEntity, IMessage} from \"entities/Messages\";\nimport Avatar from \"components/common/Avatar/Avatar\";\nimport ProfileCard from \"components/common/Profile/ProfileCard/ProfileCard\";\nimport {IRootState} from \"store/store\";\nimport {IDialog} from \"store/common/messages/state\";\nimport {selectMyProfile} from \"store/common/profile/selectors\";\nimport {receiveNewMessageAction, sendMessageAction} from \"store/common/messages/actionCreators\";\n\ninterface IChat {\n    className: string,\n    activeDialog: IDialog\n}\n\n\nconst Chat = ({className, activeDialog}: IChat) => {\n    const dispatch = useDispatch();\n    const elementForScrollRef = useRef<HTMLDivElement>(null);\n    const allMessages = useSelector((store:IRootState) => store.dialogs.messages);\n    const myProfile = useSelector(selectMyProfile);\n    const receiverProfile = activeDialog.receiver;\n    const messages = allMessages && allMessages[activeDialog._id];\n\n    const [text, setText] = useState<string>('');\n    const [hideMessagesList, setHideMessagesList] = useState<boolean>(true);\n    const {subscribe, socket} = useSocket();\n\n    const onChangeText = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setText(e.target.value);\n    }, [])\n\n    const sendMessage = useCallback(() => {\n        dispatch(sendMessageAction({text, profileId: activeDialog.receiver._id}));\n        setText('');\n    }, [text, activeDialog])\n\n    useEffect(() => {\n        subscribe('NewMessage', (message:IMessage) => {\n            dispatch(receiveNewMessageAction(message));\n        });\n    }, []);\n\n    useEffect(() => {\n        if (elementForScrollRef && elementForScrollRef.current) {\n            elementForScrollRef.current.scrollIntoView(false);\n            setHideMessagesList(false);\n        }\n    }, [messages]);\n\n    if (!myProfile) {\n        return null;\n    }\n    const profiles = {\n        [myProfile._id]: myProfile,\n        [receiverProfile._id]: receiverProfile,\n    }\n\n    return (\n        <div className={cx(className, styles.Chat)}>\n\n            <div className={styles.Header}>\n                <div className={styles.HeaderName}>{receiverProfile.name + ' ' + receiverProfile.secondName}</div>\n                <ProfileCard\n                    className={styles.Avatar}\n                    profile={receiverProfile}\n                    configurable={false}/>\n            </div>\n\n            <div className={cx(styles.MessagesList, {\n                    [styles.HideMessagesList]: hideMessagesList\n                }\n            )}>\n                {messages && messages.map((item, index) => {\n                    const startNextSender = index === 0 || messages[index - 1].sender !== item.sender;\n                    return (\n                        <div key={item._id} className={cx(styles.Message, {\n                            [styles.MatchesPreviousSender]: startNextSender\n                        })}>\n                            <div className={styles.MessageOverlay}>\n                                <div className={styles.Avatar}>\n                                    {startNextSender &&\n                                        <Avatar\n                                            config={profiles[item.sender].avatar}\n                                            configurable={false}/>\n                                    }\n                                </div>\n                                <div className={styles.MessageData}>\n                                    {startNextSender &&\n                                        <div className={styles.Name}>{\n                                            profiles[item.sender].name + ' ' + profiles[item.sender].secondName\n                                        }</div>\n                                    }\n                                    <div className={styles.Text}>{item.text}</div>\n                                </div>\n                            </div>\n                        </div>\n                    )\n                })}\n\n                <div className={styles.ElementForScroll} ref={elementForScrollRef}></div>\n            </div>\n\n            <div className={styles.WriteMessage}>\n                <Input className={styles.Input} placeholder=\"Write a message...\" allowClear value={text} onChange={onChangeText}/>\n                <Button className={styles.SendButton} onClick={sendMessage}>\n                    <UpCircleOutlined translate=\"true\"/>\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat;\n","import React from \"react\";\nimport Dialogs from \"./Dialogs/Dialogs\";\nimport Chat from \"./Chat/Chat\";\nimport styles from './MessengerPage.module.scss';\nimport {useSelector} from \"react-redux\";\nimport {IRootState} from \"../../../store/store\";\n\nconst MessengerPage = () => {\n    const activeDialog = useSelector((store: IRootState) => store.dialogs.activeDialog)\n\n    return (\n        <div className={styles.messages}>\n            <Dialogs className={styles.dialogs} activeDialog={activeDialog}/>\n            {activeDialog && <Chat className={styles.chat} activeDialog={activeDialog}/>}\n        </div>\n    )\n}\n\nexport default MessengerPage\n","import { RoutesEntity } from \"../entities/Routes\"\nimport { PROFILE, NEWS, FRIENDS, MESSAGES } from '../constants/routes'\n\nimport News from \"../components/pages/NewsPage/NewsPage\"\nimport Profile from \"../components/pages/ProfilePage/ProfilePage\"\nimport Friends from \"../components/pages/FriendsPage/FriendsPage\"\nimport Messages from \"../components/pages/MessengerPage/MessengerPage\"\nimport {\n    CommentOutlined,\n    SmileOutlined,\n    TeamOutlined,\n    UnorderedListOutlined\n} from \"@ant-design/icons/lib\";\n\nexport const Routes: RoutesEntity[] = [{\n    id: 0,\n    text: 'Profile',\n    icon: SmileOutlined,\n    component: Profile,\n    path: PROFILE\n}, {\n    id: 1,\n    text: 'News',\n    icon: UnorderedListOutlined,\n    component: News,\n    path: NEWS\n}, {\n    id: 2,\n    text: 'Friends',\n    icon: TeamOutlined,\n    component: Friends,\n    path: FRIENDS\n}, {\n    id: 3,\n    text: 'Messages',\n    icon: CommentOutlined,\n    component: Messages,\n    path: MESSAGES\n}]\n","export const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const PROFILE = '/profile';\nexport const NEWS = '/news';\nexport const FRIENDS = '/friends';\nexport const MESSAGES = '/messages';","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { RoutesEntity } from \"../../../entities/Routes\";\nimport { List } from \"antd\";\n\nimport './Routes.css'\n\ninterface IRoutesProps {\n    items: RoutesEntity[]\n}\n\nconst Routes = ({items}: IRoutesProps) => {\n    return (\n        <div>\n            <List\n                size=\"large\"\n                dataSource={items}\n                renderItem={item => (\n                    <List.Item key={item.id}>\n                        <Link to={item.path} className=\"RouteItem\">\n                            <item.icon translate=\"true\" className=\"RouteItem-Icon\"/>\n                            <span className=\"RouteItem-Text\">{item.text}</span>\n                        </Link>\n                    </List.Item>\n                )}\n            />\n        </div>\n    )\n}\n\nexport default Routes;\n","import {Routes as RoutesItems} from \"../../../routes/routes\";\nimport {Route, Switch} from \"react-router-dom\";\nimport {RoutesEntity} from \"../../../entities/Routes\";\nimport React from \"react\";\n\nconst ContentArea = () => {\n   return (\n       <>\n           <Switch>\n               {\n                   RoutesItems.map((route: RoutesEntity) => (\n                       <Route\n                           path={route.path}\n                           component={route.component}\n                           key={route.path} />))\n               }\n           </Switch>\n       </>\n)};\n\nexport default ContentArea;\n","import React, {useCallback, useState} from \"react\";\nimport { Form, Input, Button, Alert } from 'antd';\nimport { registration } from 'service/auth'\nimport {formItemLayout, tailFormItemLayout} from \"../SingIn/SingIn\";\n\nconst SingUp = () => {\n    const [showSuccess, setShowSuccess] = useState(false);\n    const [showError, setShowError] = useState(false);\n\n    const onFinish = useCallback(({username, password}) => {\n        registration(username, password).then((response) => {\n            setShowSuccess(true);\n            setShowError(false);\n        }).catch(() => {\n            setShowError(true);\n            setShowSuccess(false);\n        });\n    }, []);\n\n    return (\n        <div>\n            <Form\n                {...formItemLayout}\n                name=\"basic\"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}>\n                <Form.Item\n                    label=\"Username\"\n                    name=\"username\"\n                    rules={[{ required: true, message: 'Please input your username!' }]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    label=\"Password\"\n                    name=\"password\"\n                    rules={[{ required: true, message: 'Password must be at least 6 characters!', min: 6 }]}\n                >\n                    <Input.Password />\n                </Form.Item>\n                <Form.Item\n                    name=\"confirm\"\n                    label=\"Confirm Password\"\n                    dependencies={['password']}\n                    hasFeedback\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please confirm your password!',\n                        },\n                        ({ getFieldValue }) => ({\n                            validator(rule, value) {\n                                if (!value || getFieldValue('password') === value) {\n                                    return Promise.resolve();\n                                }\n                                return Promise.reject('The two passwords that you entered do not match!');\n                            },\n                        }),\n                    ]}\n                >\n                    <Input.Password />\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </Form.Item>\n            </Form>\n\n            {showSuccess && <Alert message=\"User successfully created\" type=\"success\" />}\n            {showError && <Alert message=\"Something went wrong, try again\" type=\"error\" />}\n\n        </div>\n    )\n}\n\nexport default SingUp;\n","import React from 'react'\nimport { Tabs } from 'antd';\nimport SingIn from './SingIn/SingIn'\nimport SingUp from './SingUp/SingUp'\n\nimport './LoginPage.css';\n\nconst LoginPage = () => {\n    return (\n        <div className=\"LoginPage\">\n            <Tabs defaultActiveKey=\"1\">\n                <Tabs.TabPane tab=\"Sing In\" key=\"1\">\n                    <SingIn />\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"Sing Up\" key=\"2\">\n                    <SingUp />\n                </Tabs.TabPane>\n            </Tabs>\n        </div>\n  )\n}\n\nexport default LoginPage;\n","import React, {useCallback} from \"react\";\nimport { Popover, Button } from \"antd\";\nimport { logout } from \"service/auth\";\nimport {useSelector} from \"react-redux\";\nimport {selectMyProfile} from \"store/common/profile/selectors\";\n\nimport \"./User.css\"\n\n\nconst User = () => {\n    const myProfile = useSelector(selectMyProfile);\n    const userLogout = useCallback(() => logout(), []);\n\n    if (!myProfile) {\n        return null;\n    }\n\n    const logoutBtn = (\n        <Button onClick={userLogout}>Logout</Button>\n    );\n\n    const userName = myProfile.name;\n    const userSecondName = myProfile.secondName || '';\n\n    return (\n        <Popover className=\"User\" content={logoutBtn} title={`${userName} ${userSecondName}`} trigger=\"click\">\n            <Button type=\"link\">{userName}</Button>\n        </Popover>\n    )\n}\n\nexport default User;\n","import React, {useEffect} from 'react';\nimport Axios from 'axios';\nimport { Router } from \"react-router-dom\";\nimport history from \"constants/history\";\nimport { Routes as RoutesItems } from \"routes/routes\";\nimport Routes from \"components/common/Routes/Routes\";\nimport ContentArea from \"components/common/ContentArea/ContentArea\";\nimport LoginPage from \"components/pages/LoginPage/LoginPage\";\nimport User from \"components/common/User/User\";\nimport {isAuthenticated, logout} from \"service/auth\";\n\nimport styles from './App.module.scss';\nimport {fetchProfileDataAction} from \"../../store/common/profile/actionCreators\";\nimport {useDispatch} from \"react-redux\";\nimport useSocket from \"../../hooks/socket\";\n\nif (window.localStorage.uathToken) {\n    Axios.defaults.headers = {\n        'Authorization': 'Token ' + window.localStorage.uathToken,\n        'Content-Type': 'application/json'\n    }\n}\n\nconst App = () => {\n    const dispatch = useDispatch();\n    useSocket();\n\n    useEffect(() => {\n        if (isAuthenticated()) {\n            dispatch(fetchProfileDataAction());\n        }\n    }, [])\n\n    if (!isAuthenticated()) {\n        return (\n            <LoginPage />\n        )\n    }\n\n\n    return (\n        <div className={styles.App}>\n            <div className={styles.HeaderLine}/>\n            <div className={styles.AppContainer}>\n                <div className={styles.Header}>\n                    <div className={styles.AppName}>SN</div>\n                    <User />\n                </div>\n                <Router history={history}>\n                    <div className={styles.ContentContainer}>\n                        <div className={styles.Routes}>\n                            <Routes items={RoutesItems}/>\n                        </div>\n                        <div className={styles.ContentArea}>\n                            <ContentArea/>\n                        </div>\n                    </div>\n                </Router>\n            </div>\n        </div>\n    )\n};\n\nexport default App;\n","import moment from \"moment\";\nimport {IProfileState} from \"./state\";\nimport {IProfileAction} from \"./actionCreators\";\nimport {ProfileActionTypes} from \"./actionTypes\";\nimport {LoadingState} from \"../../state\";\n\nconst initialState: IProfileState = {\n    loading: LoadingState.LOADED,\n    posts: []\n};\n\nexport default (state = initialState, action: IProfileAction) => {\n    switch (action.type) {\n        case ProfileActionTypes.SET_PROFILE_DATA:\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    ...action.payload,\n                    birthday: action.payload.birthday && moment(action.payload.birthday)\n                }\n            };\n        case ProfileActionTypes.SET_PROFILE_AVATAR:\n            return {\n                ...state,\n                data: {\n                    ...state.data,\n                    avatar: action.payload\n                }\n            };\n        case ProfileActionTypes.SET_PROFILE_LOADING_STATE:\n            return {\n                ...state,\n                loading: action.payload\n            };\n        case ProfileActionTypes.FETCH_PROFILE_POSTS_SUCCESS:\n            return {\n                ...state,\n                posts: action.payload\n            };\n        case ProfileActionTypes.CREATE_NEW_POST:\n            return {\n                ...state,\n                posts: [\n                    action.payload,\n                    ...state.posts,\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import {IMessagesState} from \"./state\";\nimport {LoadingState} from \"../../state\";\nimport {IMessagesAction} from \"./actionCreators\";\nimport {MessagesActionTypes} from \"./actionTypes\";\n\nconst initialState: IMessagesState = {\n    dialogs: [],\n    activeDialog: undefined,\n    messages: {},\n    loading: LoadingState.LOADED,\n    writeMessageLoader: LoadingState.LOADED,\n};\n\nexport default (state = initialState, action: IMessagesAction) => {\n    switch (action.type) {\n        case MessagesActionTypes.SET_LOADING_STATE:\n            return {\n                ...state,\n                loading: action.payload\n            }\n        case MessagesActionTypes.FETCH_DIALOGS_SUCCESS:\n            return {\n                ...state,\n                dialogs: action.payload\n            }\n        case MessagesActionTypes.SET_ACTIVE_DIALOG:\n            return {\n                ...state,\n                activeDialog: action.payload.dialog,\n            };\n        case MessagesActionTypes.FETCH_DIALOG_MESSAGES_SUCCESS:\n            if (!state.activeDialog) {\n                return state;\n            }\n\n            const messages = action.payload;\n\n            return {\n                ...state,\n                messages: {\n                    ...state.messages,\n                    [state.activeDialog._id]: messages\n                }\n            };\n        case MessagesActionTypes.FETCH_DIALOG_MESSAGES_FAILED:\n            if (!state.activeDialog) {\n                return state;\n            }\n\n            return {\n                ...state,\n                messages: {\n                    ...state.messages,\n                    [state.activeDialog._id]: []\n                }\n            };\n        case MessagesActionTypes.RECEIVE_NEW_MESSAGE:\n            const message = action.payload;\n            if (!message || !state.dialogs || !state.activeDialog) {\n                return state;\n            }\n\n            const dialogId = message.dialog\n\n            const updatedDialog = state.dialogs.find(item => item._id === dialogId) || state.dialogs[0]\n            updatedDialog.text = message.text;\n            updatedDialog.lastMessageFromMe = message.receiver._id === state.activeDialog.receiver._id;\n            const updatedDialogs = state.dialogs.filter(item => item._id !== dialogId);\n\n            return {\n                ...state,\n                dialogs: [\n                    updatedDialog,\n                    ...updatedDialogs,\n                ],\n                messages: {\n                    ...state.messages,\n                    [dialogId]: state.messages && state.messages[dialogId]\n                        ? [...state.messages[dialogId], message]\n                        : [message]\n                }\n            };\n        case MessagesActionTypes.SET_LOADING_STATE_WRITE_MESSAGE_MODAL:\n            return {\n                ...state,\n                writeMessageLoader: action.payload\n            };\n        default:\n            return state;\n    }\n};\n","import {INewsState} from \"./state\";\nimport {INewsAction} from \"./actionCreators\";\nimport {NewsActionTypes} from \"./actionTypes\";\nimport {LoadingState} from \"../../state\";\nimport {ProfileActionTypes} from \"../profile/actionTypes\";\nimport {IProfileAction} from \"../profile/actionCreators\";\n\nconst initialState: INewsState = {\n    loading: LoadingState.LOADED,\n    posts: []\n};\n\nexport default (state = initialState, action: INewsAction | IProfileAction) => {\n    switch (action.type) {\n        case NewsActionTypes.FETCH_NEWS_SUCCESS:\n            return {\n                ...state,\n                posts: action.payload\n            };\n        case NewsActionTypes.RECEIVE_NEW_POST || ProfileActionTypes.CREATE_NEW_POST:\n            return {\n                ...state,\n                posts: [\n                    action.payload,\n                    ...state.posts\n                ]\n            };\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport profileReducer from './common/profile/reducer';\nimport messagesReducer from './common/messages/reducer';\nimport newsReduces from './common/news/reducer';\n\nexport const rootReducer = combineReducers({\n    profile: profileReducer,\n    dialogs: messagesReducer,\n    news: newsReduces\n});\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport {IFetchProfilePostsAction, ProfileActionTypes} from \"./actionTypes\";\nimport ProfileService from \"service/profile\";\nimport {\n    setProfileLoadingStateAction,\n    setProfileDataAction,\n    fetchProfilePostsSuccessAction\n} from \"./actionCreators\";\nimport {LoadingState} from \"../../state\";\nimport {PostService} from \"../../../service/post\";\nimport {IPost} from \"../news/state\";\n\n\nexport function* profileSaga() {\n    yield takeLatest(ProfileActionTypes.FETCH_PROFILE_DATA, fetchProfileData);\n    yield takeLatest(ProfileActionTypes.FETCH_PROFILE_POSTS, fetchProfilePosts);\n}\n\nexport function* fetchProfileData() {\n    try {\n        yield put(setProfileLoadingStateAction(LoadingState.LOADING));\n        const profile = yield call(ProfileService.getSelf);\n        yield put(setProfileDataAction(profile));\n        yield put(setProfileLoadingStateAction(LoadingState.LOADED));\n    } catch (error) {\n        yield put(setProfileLoadingStateAction(LoadingState.ERROR));\n    }\n}\n\nexport function* fetchProfilePosts({payload: filter}: IFetchProfilePostsAction) {\n    try {\n        const posts: IPost[] = yield call(PostService.list, filter);\n        yield put(fetchProfilePostsSuccessAction(posts));\n    } catch (error) {\n    }\n}\n\n\n","import Service from './base'\n\ninterface ISendMessage {\n    text: string,\n    profileId: string\n}\n\nexport const MessagesService = {\n    dialogsList: () => Service.get('api/messages/dialogsList/'),\n    dialogMessages: (id: string | undefined) => Service.get('api/messages/dialogMessages/', {id}),\n    sendMessage: ({text, profileId}: ISendMessage) => Service.post('api/messages/sendMessage/', {text, profileId}),\n}\n","import {call, put, takeEvery, takeLatest} from \"redux-saga/effects\";\nimport {MessagesService} from \"service/messages\";\nimport {\n    IFetchDialogMessagesAction,\n    ISendMessageAction,\n    ISetActiveDialogAction,\n    MessagesActionTypes\n} from \"./actionTypes\";\nimport {\n    fetchDialogMessagesAction,\n    fetchDialogMessagesFailedAction,\n    fetchDialogMessagesSuccessAction,\n    fetchDialogsFailedAction,\n    fetchDialogsSuccessAction, receiveNewMessageAction,\n    setActiveDialogAction, setLoadingStateWriteMessageModalAction,\n    setMessagesLoadingState\n} from \"./actionCreators\";\nimport {LoadingState} from \"../../state\";\n\n\nexport function* messagesSaga() {\n    yield takeEvery(MessagesActionTypes.SET_ACTIVE_DIALOG, setActiveDialog);\n    yield takeLatest(MessagesActionTypes.FETCH_DIALOGS, fetchDialogs);\n    yield takeLatest(MessagesActionTypes.FETCH_DIALOG_MESSAGES, fetchMessages);\n    yield takeLatest(MessagesActionTypes.SEND_MESSAGE, sendMessage);\n}\n\nfunction* fetchDialogs() {\n    try {\n        yield put(setMessagesLoadingState(LoadingState.LOADING));\n        const dialogs = yield call(MessagesService.dialogsList);\n        yield put(fetchDialogsSuccessAction(dialogs));\n        yield put(setActiveDialogAction(dialogs[0]));\n        yield put(setMessagesLoadingState(LoadingState.LOADED));\n    } catch (e) {\n        yield put(fetchDialogsFailedAction());\n        yield put(setMessagesLoadingState(LoadingState.ERROR));\n    }\n}\n\nfunction* fetchMessages({payload: dialogId}: IFetchDialogMessagesAction) {\n    try {\n        yield put(setMessagesLoadingState(LoadingState.LOADING));\n        const messages = yield call(MessagesService.dialogMessages, dialogId);\n        yield put(fetchDialogMessagesSuccessAction(messages));\n        yield put(setMessagesLoadingState(LoadingState.LOADED));\n    } catch (e) {\n        yield put(fetchDialogMessagesFailedAction());\n        yield put(setMessagesLoadingState(LoadingState.ERROR));\n    }\n}\n\nfunction* setActiveDialog({payload}: ISetActiveDialogAction) {\n    if (!payload.dialog) {\n        return;\n    }\n    // Чтоб не запрашивать один диалог несколько раз, если что сообщения придут по сокету\n    if (payload.hasMassages) {\n        return;\n    }\n\n    yield put(fetchDialogMessagesAction(payload.dialog._id));\n}\n\nfunction* sendMessage({payload}: ISendMessageAction) {\n    try {\n        yield put(setLoadingStateWriteMessageModalAction(LoadingState.LOADING));\n        const message = yield call(MessagesService.sendMessage, payload);\n        yield put(receiveNewMessageAction(message.data));\n        yield put(setLoadingStateWriteMessageModalAction(LoadingState.LOADED));\n    } catch (e) {\n        yield put(setLoadingStateWriteMessageModalAction(LoadingState.ERROR));\n    }\n}\n","import { call, put, takeLatest } from 'redux-saga/effects';\n\nimport {PostService} from \"../../../service/post\";\nimport {IPost} from \"./state\";\nimport {NewsActionTypes} from \"./actionTypes\";\nimport {fetchNewsSuccessAction} from \"./actionCreators\";\n\n\nexport function* newsSaga() {\n    yield takeLatest(NewsActionTypes.FETCH_NEWS, fetchNews);\n}\n\nexport function* fetchNews() {\n    try {\n        const posts: IPost[] = yield call(PostService.list, {});\n        yield put(fetchNewsSuccessAction(posts));\n    } catch (error) {\n    }\n}\n\n\n","import { all } from 'redux-saga/effects';\nimport { profileSaga } from './common/profile/sagas';\nimport { messagesSaga } from './common/messages/sagas';\nimport {newsSaga} from \"./common/news/sagas\";\n\nexport default function* rootSaga() {\n    yield all([\n        profileSaga(),\n        messagesSaga(),\n        newsSaga()\n    ]);\n}\n","import {applyMiddleware, createStore} from 'redux';\nimport logger from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from \"redux-saga\";\n\nimport {rootReducer} from './rootReducer';\nimport RootSaga from \"./sagas\";\n\nimport {IProfileState} from \"./common/profile/state\";\nimport {IMessagesState} from \"./common/messages/state\";\nimport {INewsState} from \"./common/news/state\";\n\nexport interface IRootState {\n    profile: IProfileState\n    dialogs: IMessagesState\n    news: INewsState\n}\n\nconst sagaMiddleware = createSagaMiddleware()\n\nexport const store = createStore(\n    rootReducer,\n    composeWithDevTools(\n        applyMiddleware(logger),\n        applyMiddleware(sagaMiddleware)\n    )\n);\n\nsagaMiddleware.run(RootSaga)\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport { Provider} from 'react-redux'\nimport Axios from 'axios'\nimport 'antd/dist/antd.css';\nimport createSagaMiddleware from 'redux-saga'\n\nimport {store} from 'store/store';\n\nimport {applyMiddleware} from \"redux\";\n\n// import { login } from './service/auth'\n\nif (window.localStorage.uathToken) {\n    Axios.defaults.headers = {\n        'Authorization': 'Token ' + window.localStorage.uathToken,\n        'Content-Type': 'application/json'\n    }\n}\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n","import React, {useCallback, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AvatarProps, BigHead} from \"@bigheads/core\";\nimport {Button, Form, Spin} from \"antd\";\nimport { Row, Col } from 'antd';\nimport ProfileService from \"service/profile\";\nimport Fields from './Fields/Fields';\nimport {selectMyProfile} from \"store/common/profile/selectors\";\n\nimport \"./ConfigureAvatar.css\"\nimport {setProfileAvatarAction} from \"store/common/profile/actionCreators\";\n\n// Нужен рефактор\nconst ConfigureAvatar = () => {\n    const myProfile = useSelector(selectMyProfile);\n    const avatar = myProfile && myProfile.avatar || {};\n\n    const [mask, setMask] = useState(!!(avatar && avatar.mask));\n    const [body, setBody]:any = useState((avatar && avatar.body) || 'chest');\n    const [lipColor, setLipColor]:any = useState((avatar && avatar.lipColor) || 'red');\n    const [skinTone, setSkinTone]:any = useState((avatar && avatar.skinTone) || 'light');\n    const [hair, setHair]:any = useState((avatar && avatar.hair) || 'none');\n    const [hairColor, setHairColor]:any = useState((avatar && avatar.hairColor) || 'blonde');\n    const [clothing, setClothing]:any = useState((avatar && avatar.clothing) || 'naked');\n    const [clothingColor, setClothingColor]:any = useState((avatar && avatar.clothingColor) || 'white');\n    const [graphic, setGraphic]:any = useState((avatar && avatar.graphic) || 'none');\n    const [eyes, setEyes]:any = useState((avatar && avatar.eyes) || 'normal');\n    const [eyebrows, setEyebrows]:any = useState((avatar && avatar.eyebrows) || 'raised');\n    const [mouth, setMouth]:any = useState((avatar && avatar.mouth) || 'grin');\n    const [facialHair, setFacialHair]:any = useState((avatar && avatar.facialHair) || 'none');\n    const [accessory, setAccessory]:any = useState((avatar && avatar.accessory) || 'none');\n    const [hat, setHat]:any = useState((avatar && avatar.hat) || 'none');\n    const [hatColor, setHatColor]:any = useState((avatar && avatar.hatColor) || 'white');\n    const [lashes, setLashes]:any = useState((avatar && avatar.lashes) || false);\n\n    const [loaderVisible, setLoaderVisible] = useState(false);\n    const dispatch = useDispatch();\n\n    const handleSaveData = useCallback((data) => {\n        setLoaderVisible(true);\n        ProfileService.setAvatar(data).then((editedAvatar) => {\n            dispatch(setProfileAvatarAction(editedAvatar));\n            setLoaderVisible(false);\n        });\n    }, []);\n\n    const handleValuesChange = useCallback((changedValues) => {\n        const changedFields = Object.keys(changedValues);\n\n        changedFields.forEach((item) => {\n            eval('set' + item[0].toUpperCase() + item.slice(1))(changedValues[item]);\n        });\n    }, []);\n\n    return (\n        <Spin spinning={loaderVisible}>\n            <div className=\"ConfigureAvatar\">\n                <div className=\"ConfigureAvatar-ColumnFields\">\n                    <Form\n                        labelCol={{\n                            xs: { span: 24 },\n                            sm: { span: 6 },\n                        }}\n                        onFinish={handleSaveData}\n                        onValuesChange={handleValuesChange}>\n\n                        <Row>\n                            <Col span={12}><Fields.Mask initialValue={mask}/></Col>\n                            <Col span={12}><Fields.Lashes initialValue={lashes}/></Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}><Fields.Body initialValue={body}/></Col>\n                            <Col span={12}><Fields.LipColor initialValue={lipColor}/></Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}><Fields.SkinTone initialValue={skinTone}/></Col>\n                            <Col span={12}><Fields.Hair initialValue={hair}/></Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}><Fields.HairColor initialValue={hairColor}/></Col>\n                            <Col span={12}><Fields.Clothing initialValue={clothing}/></Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}><Fields.ClothingColor initialValue={clothingColor}/></Col>\n                            <Col span={12}><Fields.Graphic initialValue={graphic}/></Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}><Fields.Eyes initialValue={eyes}/></Col>\n                            <Col span={12}><Fields.Eyebrows initialValue={eyebrows}/></Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}><Fields.Mouth initialValue={mouth}/></Col>\n                            <Col span={12}><Fields.FacialHair initialValue={facialHair}/></Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}><Fields.Hat initialValue={hat}/></Col>\n                            <Col span={12}><Fields.HatColor initialValue={hatColor}/></Col>\n                        </Row>\n                        <Row>\n                            <Col span={12}><Fields.Accessory initialValue={accessory}/></Col>\n                        </Row>\n\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Save\n                        </Button>\n                    </Form>\n                </div>\n                <div className=\"ConfigureAvatar-ColumnAvatar\">\n                    <BigHead\n                        accessory={accessory}\n                        body={body}\n                        circleColor=\"blue\"\n                        clothing={clothing}\n                        clothingColor={clothingColor}\n                        eyebrows={eyebrows}\n                        eyes={eyes}\n                        facialHair={facialHair}\n                        graphic={graphic}\n                        hair={hair}\n                        hairColor={hairColor}\n                        hat={hat}\n                        hatColor={hatColor}\n                        lashes={lashes}\n                        lipColor={lipColor}\n                        mask={mask}\n                        mouth={mouth}\n                        skinTone={skinTone}\n                    />\n                </div>\n            </div>\n        </Spin>\n    );\n}\n\nexport default ConfigureAvatar;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Avatar\":\"ProfileCard_Avatar__12ncx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostsList\":\"PostsList_PostsList__2iGO_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewsPage\":\"NewsPage_NewsPage__10sI6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FriendsList\":\"FriendsList_FriendsList__zzMdB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FindFriends\":\"FindFriends_FindFriends__K1Qwy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OutgoingRequests\":\"OutgoingRequests_OutgoingRequests__1BHiD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FriendRequests\":\"FriendRequests_FriendRequests__2fm7Q\"};","import {Action} from \"redux\";\nimport {IProfileAvatar, IProfileData} from \"./state\";\nimport {LoadingState} from \"../../state\";\nimport {IPost} from \"store/common/news/state\";\n\nexport enum ProfileActionTypes {\n    SET_PROFILE_DATA = 'profile/SET_PROFILE_DATA',\n    SET_PROFILE_AVATAR = 'profile/SET_PROFILE_AVATAR',\n    FETCH_PROFILE_DATA = 'profile/FETCH_PROFILE_DATA',\n    SET_PROFILE_LOADING_STATE = 'profile/SET_PROFILE_LOADING_STATE',\n    FETCH_PROFILE_DATA_SUCCESS = 'profile/FETCH_PROFILE_DATA_SUCCESS',\n    FETCH_PROFILE_DATA_FAILED = 'profile/FETCH_PROFILE_DATA_FAILED',\n    FETCH_PROFILE_POSTS = 'profile/FETCH_PROFILE_POSTS',\n    FETCH_PROFILE_POSTS_SUCCESS = 'profile/FETCH_PROFILE_POSTS_SUCCESS',\n    FETCH_PROFILE_POSTS_FAILED = 'profile/FETCH_PROFILE_POSTS_FAILED',\n    CREATE_NEW_POST = 'profile/CREATE_NEW_POST',\n}\n\nexport interface IFetchProfileDataAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.FETCH_PROFILE_DATA;\n}\n\nexport interface IFetchProfileDataSuccessAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.FETCH_PROFILE_DATA_SUCCESS;\n    payload: IProfileData\n}\n\nexport interface IFetchProfileDataFailedAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.FETCH_PROFILE_DATA_FAILED;\n}\n\nexport interface ISetProfileDataAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.SET_PROFILE_DATA;\n    payload: IProfileData;\n}\n\nexport interface ISetProfileAvatarAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.SET_PROFILE_AVATAR;\n    payload: IProfileAvatar;\n}\n\nexport interface ISetProfileLoadingStateAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.SET_PROFILE_LOADING_STATE;\n    payload: LoadingState\n}\n\nexport interface IFetchProfilePostsAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.FETCH_PROFILE_POSTS;\n    payload: {\n        profileId: string,\n        pageSize: number\n    }\n}\n\nexport interface IFetchProfilePostsSuccessAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.FETCH_PROFILE_POSTS_SUCCESS;\n    payload: IPost[];\n}\n\nexport interface IFetchProfilePostsFailedAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.FETCH_PROFILE_POSTS_FAILED;\n}\n\nexport interface ICreateNewPostAction extends Action<ProfileActionTypes> {\n    type: ProfileActionTypes.CREATE_NEW_POST;\n    payload: IPost\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Chat\":\"Chat_Chat__1-2Dy\",\"Header\":\"Chat_Header__1sMvz\",\"HeaderName\":\"Chat_HeaderName__1stLY\",\"WriteMessage\":\"Chat_WriteMessage__3Sjn4\",\"SendButton\":\"Chat_SendButton__2JfcT\",\"Input\":\"Chat_Input__1FWoD\",\"Avatar\":\"Chat_Avatar__2qEs3\",\"MessagesList\":\"Chat_MessagesList__3YCyz\",\"HideMessagesList\":\"Chat_HideMessagesList__2dHni\",\"Message\":\"Chat_Message__3X3SX\",\"Messages\":\"Chat_Messages__w9zR1\",\"MatchesPreviousSender\":\"Chat_MatchesPreviousSender__1Akby\",\"MessageData\":\"Chat_MessageData__3iS0E\",\"FromMe\":\"Chat_FromMe__yxH_r\",\"Name\":\"Chat_Name__1NNVg\",\"MessageOverlay\":\"Chat_MessageOverlay__2__-i\",\"Text\":\"Chat_Text__iDdA-\",\"ElementForScroll\":\"Chat_ElementForScroll__qfusB\"};","import React from \"react\";\nimport {Form, Switch} from \"antd\";\nimport {ISwitchField} from \"./Fields\";\n\nconst Mask = ({initialValue}:ISwitchField) => {\n    return (\n        <Form.Item\n            label=\"Mask\"\n            name=\"mask\"\n            valuePropName=\"checked\"\n            initialValue={initialValue}\n        >\n            <Switch />\n        </Form.Item>\n    )\n}\n\nexport default Mask;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Body = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Body\"\n            name=\"body\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"chest\">Chest</Select.Option>\n                <Select.Option value=\"breasts\">Breasts</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Body;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst LipColor = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Lip Color\"\n            name=\"lipColor\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"red\">Red</Select.Option>\n                <Select.Option value=\"purple\">Purple</Select.Option>\n                <Select.Option value=\"pink\">Pink</Select.Option>\n                <Select.Option value=\"turqoise\">Turqoise</Select.Option>\n                <Select.Option value=\"green\">Green</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default LipColor;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst SkinTone = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Skin Tone\"\n            name=\"skinTone\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"light\">Light</Select.Option>\n                <Select.Option value=\"yellow\">Yellow</Select.Option>\n                <Select.Option value=\"brown\">Brown</Select.Option>\n                <Select.Option value=\"dark\">Dark</Select.Option>\n                <Select.Option value=\"red\">Red</Select.Option>\n                <Select.Option value=\"black\">Black</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default SkinTone;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Hair = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Hair\"\n            name=\"hair\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"none\">None</Select.Option>\n                <Select.Option value=\"long\">Long</Select.Option>\n                <Select.Option value=\"bun\">Bun</Select.Option>\n                <Select.Option value=\"short\">Short</Select.Option>\n                <Select.Option value=\"pixie\">Pixie</Select.Option>\n                <Select.Option value=\"balding\">Balding</Select.Option>\n                <Select.Option value=\"buzz\">Buzz</Select.Option>\n                <Select.Option value=\"afro\">Afro</Select.Option>\n                <Select.Option value=\"bob\">Bob</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Hair;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst HairColor = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Hair Color\"\n            name=\"hairColor\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"blonde\">Blonde</Select.Option>\n                <Select.Option value=\"orange\">Orange</Select.Option>\n                <Select.Option value=\"black\">Black</Select.Option>\n                <Select.Option value=\"white\">White</Select.Option>\n                <Select.Option value=\"brown\">Brown</Select.Option>\n                <Select.Option value=\"blue\">Blue</Select.Option>\n                <Select.Option value=\"pink\">Pink</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default HairColor;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Clothing = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Clothing\"\n            name=\"clothing\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"naked\">Naked</Select.Option>\n                <Select.Option value=\"shirt\">Shirt</Select.Option>\n                <Select.Option value=\"dressShirt\">DressShirt</Select.Option>\n                <Select.Option value=\"vneck\">Vneck</Select.Option>\n                <Select.Option value=\"tankTop\">TankTop</Select.Option>\n                <Select.Option value=\"dress\">Dress</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Clothing;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst ClothingColor = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Clothing color\"\n            name=\"clothingColor\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"white\">White</Select.Option>\n                <Select.Option value=\"blue\">Blue</Select.Option>\n                <Select.Option value=\"black\">Black</Select.Option>\n                <Select.Option value=\"green\">Green</Select.Option>\n                <Select.Option value=\"red\">Red</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default ClothingColor;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Graphic = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Graphic\"\n            name=\"graphic\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"none\">None</Select.Option>\n                <Select.Option value=\"redwood\">Red Wood</Select.Option>\n                <Select.Option value=\"gatsby\">Gatsby</Select.Option>\n                <Select.Option value=\"vue\">Vue</Select.Option>\n                <Select.Option value=\"react\">React</Select.Option>\n                <Select.Option value=\"graphQL\">Graph QL</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Graphic;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Eyes = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Eyes\"\n            name=\"eyes\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"normal\">Normal</Select.Option>\n                <Select.Option value=\"leftTwitch\">Left Twitch</Select.Option>\n                <Select.Option value=\"happy\">Happy</Select.Option>\n                <Select.Option value=\"content\">Content</Select.Option>\n                <Select.Option value=\"squint\">Squint</Select.Option>\n                <Select.Option value=\"simple\">Simple</Select.Option>\n                <Select.Option value=\"dizzy\">Dizzy</Select.Option>\n                <Select.Option value=\"wink\">Wink</Select.Option>\n                <Select.Option value=\"heart\">Heart</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Eyes;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Eyebrows = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Eyebrows\"\n            name=\"eyebrows\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"raised\">Raised</Select.Option>\n                <Select.Option value=\"leftLowered\">Left Lowered</Select.Option>\n                <Select.Option value=\"serious\">Serious</Select.Option>\n                <Select.Option value=\"angry\">Angry</Select.Option>\n                <Select.Option value=\"concerned\">Concerned</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Eyebrows;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Mouth = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Mouth\"\n            name=\"mouth\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"grin\">grin</Select.Option>\n                <Select.Option value=\"openSmile\">Open Smile</Select.Option>\n                <Select.Option value=\"lips\">Lips</Select.Option>\n                <Select.Option value=\"open\">Open</Select.Option>\n                <Select.Option value=\"serious\">Serious</Select.Option>\n                <Select.Option value=\"tongue\">Tongue</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Mouth;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst FacialHair = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Facial Hair\"\n            name=\"facialHair\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"none\">None</Select.Option>\n                <Select.Option value=\"none2\">None 2</Select.Option>\n                <Select.Option value=\"none3\">None 3</Select.Option>\n                <Select.Option value=\"stubble\">Stubble</Select.Option>\n                <Select.Option value=\"mediumBeard\">Medium Beard</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default FacialHair;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Accessory = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Accessory\"\n            name=\"accessory\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"none\">None</Select.Option>\n                <Select.Option value=\"roundGlasses\">Round Glasses</Select.Option>\n                <Select.Option value=\"tinyGlasses\">Tiny Glasses</Select.Option>\n                <Select.Option value=\"shades\">Shades</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Accessory;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst Hat = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Hat\"\n            name=\"hat\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"none\">None</Select.Option>\n                <Select.Option value=\"none2\">None 2</Select.Option>\n                <Select.Option value=\"none3\">None 3</Select.Option>\n                <Select.Option value=\"none4\">None 4</Select.Option>\n                <Select.Option value=\"none5\">None 5</Select.Option>\n                <Select.Option value=\"beanie\">Beanie</Select.Option>\n                <Select.Option value=\"turban\">Turban</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default Hat;\n","import React from \"react\";\nimport {Form, Switch} from \"antd\";\nimport {ISwitchField} from \"./Fields\";\n\nconst Lashes = ({initialValue}:ISwitchField) => {\n    return (\n        <Form.Item\n            label=\"Lashes\"\n            name=\"lashes\"\n            valuePropName=\"checked\"\n            initialValue={initialValue}\n        >\n            <Switch/>\n        </Form.Item>\n    )\n}\n\nexport default Lashes;\n","import React from \"react\";\nimport {Form, Select} from \"antd\";\nimport {ISelectField} from \"./Fields\";\n\nconst HatColor = ({initialValue}:ISelectField) => {\n    return (\n        <Form.Item\n            label=\"Hat Color\"\n            name=\"hatColor\"\n            initialValue={initialValue}\n        >\n            <Select>\n                <Select.Option value=\"white\">white</Select.Option>\n                <Select.Option value=\"blue\">blue</Select.Option>\n                <Select.Option value=\"black\">black</Select.Option>\n                <Select.Option value=\"green\">green</Select.Option>\n                <Select.Option value=\"red\">red</Select.Option>\n            </Select>\n        </Form.Item>\n    )\n}\n\nexport default HatColor;\n","import Mask from \"./Mask\";\nimport Body from \"./Body\";\nimport LipColor from \"./LipColor\";\nimport SkinTone from \"./SkinTone\";\nimport Hair from \"./Hair\";\nimport HairColor from \"./HairColor\";\nimport Clothing from \"./Clothing\";\nimport ClothingColor from \"./ClothingColor\";\nimport Graphic from \"./Graphic\";\nimport Eyes from \"./Eyes\";\nimport Eyebrows from \"./Eyebrows\";\nimport Mouth from \"./Mouth\";\nimport FacialHair from \"./FacialHair\";\nimport Accessory from \"./Accessory\";\nimport Hat from \"./Hat\";\nimport Lashes from \"./Lashes\";\nimport HatColor from \"./HatColor\";\n\nexport interface ISelectField {\n    initialValue: string\n}\n\nexport interface ISwitchField {\n    initialValue: boolean\n}\n\nexport default {\n    Mask,\n    Body,\n    LipColor,\n    SkinTone,\n    Hair,\n    HairColor,\n    Clothing,\n    ClothingColor,\n    Graphic,\n    Eyes,\n    Eyebrows,\n    Mouth,\n    FacialHair,\n    Accessory,\n    Hat,\n    HatColor,\n    Lashes,\n}\n","import Axios from \"axios\";\nimport { DEFAULT_API_URL } from './constants'\nimport {logout} from \"./auth\";\n\nclass Service {\n    async get(url: string, params?: any) {\n        try {\n            return await Axios.get(DEFAULT_API_URL + url, {params}).then(Res => Res.data)\n        } catch (e) {\n            if (e.response.status === 401) {\n                logout();\n            }\n        }\n    }\n\n    async post(url: string, params?: any) {\n        try {\n            return await Axios.post(DEFAULT_API_URL + url, params)\n        } catch (e) {\n            if (e.response.status === 401) {\n                logout();\n            }\n        }\n    }\n}\n\nexport default new Service();\n","import {\n    ICreateNewPostAction,\n    IFetchProfileDataAction,\n    IFetchProfileDataFailedAction,\n    IFetchProfileDataSuccessAction,\n    IFetchProfilePostsAction,\n    IFetchProfilePostsFailedAction,\n    IFetchProfilePostsSuccessAction,\n    ISetProfileAvatarAction,\n    ISetProfileDataAction,\n    ISetProfileLoadingStateAction,\n    ProfileActionTypes\n} from \"./actionTypes\";\nimport {IProfileAvatar, IProfileData} from \"./state\";\nimport {LoadingState} from \"../../state\";\nimport {IPost} from \"../news/state\";\n\nexport const fetchProfileDataAction = (): IFetchProfileDataAction => ({\n    type: ProfileActionTypes.FETCH_PROFILE_DATA,\n});\n\nexport const fetchProfileDataSuccessAction = (payload: IProfileData): IFetchProfileDataSuccessAction => ({\n    type: ProfileActionTypes.FETCH_PROFILE_DATA_SUCCESS,\n    payload\n});\n\nexport const fetchProfileDataFailedAction = (payload: IProfileData): IFetchProfileDataFailedAction => ({\n    type: ProfileActionTypes.FETCH_PROFILE_DATA_FAILED\n});\n\nexport const setProfileDataAction = (payload: IProfileData): ISetProfileDataAction => ({\n    type: ProfileActionTypes.SET_PROFILE_DATA,\n    payload\n});\n\nexport const setProfileLoadingStateAction = (payload: LoadingState): ISetProfileLoadingStateAction => ({\n    type: ProfileActionTypes.SET_PROFILE_LOADING_STATE,\n    payload\n});\n\nexport const setProfileAvatarAction = (payload: IProfileAvatar): ISetProfileAvatarAction => ({\n    type: ProfileActionTypes.SET_PROFILE_AVATAR,\n    payload\n});\n\nexport const fetchProfilePostsAction = (payload: {profileId: string, pageSize: number}): IFetchProfilePostsAction => ({\n    type: ProfileActionTypes.FETCH_PROFILE_POSTS,\n    payload\n});\n\nexport const fetchProfilePostsSuccessAction = (payload: IPost[]): IFetchProfilePostsSuccessAction => ({\n    type: ProfileActionTypes.FETCH_PROFILE_POSTS_SUCCESS,\n    payload\n});\n\nexport const fetchProfilePostsFailedAction = (): IFetchProfilePostsFailedAction => ({\n    type: ProfileActionTypes.FETCH_PROFILE_POSTS_FAILED\n});\n\nexport const createNewPostAction = (payload: IPost): ICreateNewPostAction => ({\n    type: ProfileActionTypes.CREATE_NEW_POST,\n    payload\n});\n\n\nexport type IProfileAction =\n    ISetProfileDataAction\n    | IFetchProfileDataAction\n    | IFetchProfileDataSuccessAction\n    | IFetchProfileDataFailedAction\n    | ISetProfileAvatarAction\n    | IFetchProfilePostsAction\n    | IFetchProfilePostsSuccessAction\n    | IFetchProfilePostsFailedAction\n    | ICreateNewPostAction\n    | ISetProfileLoadingStateAction;\n","import {IRootState} from \"../../store\";\n\nexport const selectMyProfile = (state: IRootState) => (\n    state.profile && state.profile.data\n)\n\nexport const selectMyPosts = (state: IRootState) => (\n    state.profile && state.profile.posts\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Dialog_header__2Bnog\",\"newDialog\":\"Dialog_newDialog__1n8sj\",\"DialogItem\":\"Dialog_DialogItem__3EDf1\",\"Avatar\":\"Dialog_Avatar__3O5ur\",\"Receiver\":\"Dialog_Receiver__2Be5D\",\"Name\":\"Dialog_Name__31WZ-\",\"FromMe\":\"Dialog_FromMe__2ysOy\",\"Text\":\"Dialog_Text__m2Vj3\",\"DialogsList\":\"Dialog_DialogsList__90Asn\",\"ListItem\":\"Dialog_ListItem__2Dqoc\",\"ActiveItem\":\"Dialog_ActiveItem__1dSqD\"};","import Axios from 'axios'\nimport {DEFAULT_API_URL} from \"./constants\";\n\nexport function registration(username: string, password: string) {\n    return Axios.post(DEFAULT_API_URL + 'api/auth/register', {\n        username: username,\n        password: password\n    })\n}\n\nexport function login(username: string, password: string) {\n    return Axios.post(DEFAULT_API_URL + 'api/auth/login', {\n        username: username,\n        password: password\n    })\n}\n\nexport function logout() {\n    delete window.localStorage.uathToken;\n    delete Axios.defaults.headers.Authorization;\n    window.location.reload();\n}\n\nexport function isAuthenticated() {\n    return !!Axios.defaults.headers.Authorization;\n}\n\nexport function getToken(username: string, password: string, callback: Function) {\n    Axios.post(DEFAULT_API_URL + 'api/auth/login', {\n        username: username,\n        password: password\n    }).then(response => {\n        callback({\n            authenticated: true,\n            token: response.data.token\n        })\n    })\n}\n","export const DEFAULT_API_URL = 'http://127.0.0.1:5000/';\n// export const DEFAULT_API_URL = '';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2mBMi\",\"AppContainer\":\"App_AppContainer__3VqBK\",\"ContentContainer\":\"App_ContentContainer__32Hp8\",\"ContentArea\":\"App_ContentArea__3dUvR\",\"HeaderLine\":\"App_HeaderLine__1YYND\",\"Header\":\"App_Header__N5Qin\",\"HeaderIcon\":\"App_HeaderIcon__2HpnB\",\"UserName\":\"App_UserName__2SENf\",\"Title\":\"App_Title__1Dn8a\",\"AppName\":\"App_AppName__1aJIg\",\"Routes\":\"App_Routes__hu2l3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__D7f9E\",\"ProfileData\":\"Profile_ProfileData__1si8b\",\"ProfileAvatar\":\"Profile_ProfileAvatar__1R3km\",\"Separator\":\"Profile_Separator__3QeTf\",\"UserName\":\"Profile_UserName__3J-SB\",\"EditProfile\":\"Profile_EditProfile__29JAL\",\"EditButton\":\"Profile_EditButton__3_fH9\",\"PostCreator\":\"Profile_PostCreator__Lt6ql\"};"],"sourceRoot":""}